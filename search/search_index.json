{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","text_tokens":["yml","dir","visit","exit","commands","start","reloading",".","create","new",",","file","mkdocs","server","images","files","...","and","for","live","docs","[","index","h","configuration","org","name","homepage","-","to","documentation","print","serve","build","layout","md","markdown","a","other","welcome","#","the","pages","site","message","]","full"," ","/","project","help"],"title":"Projects","title_tokens":["projects"]},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","text_tokens":["visit","for",".","full"," ","documentation","mkdocs","org"],"title":"Welcome to MkDocs","title_tokens":["to"," ","mkdocs","welcome"]},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","text_tokens":["dir","exit","start","reloading","create",".","new","mkdocs","server","and","live","docs","[","h","name","-","print","documentation","serve","build","a","the","site","message","]"," ","project","help"],"title":"Commands","title_tokens":["commands"]},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","text_tokens":["yml",".",",","file","mkdocs","images","files","...","and","docs","index","configuration","homepage","documentation","md","markdown","other","#","the","pages"," ","/"],"title":"Project layout","title_tokens":[" ","project","layout"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/","text":"无监督学习是指在没有目标的情况下寻找输入数据的有趣变换，其目的在于数据可视化、 数据压缩、数据去噪或更好地理解数据中的相关性。无监督学习是数据分析的必备技能，在解 决监督学习问题之前，为了更好地了解数据集，它通常是一个必要步骤。降维(dimensionality reduction)和聚类(clustering)都是众所周知的无监督学习方法。","text_tokens":["可视","相关","指","下","、","，","集","决","目标","之前","为了","必要","变换","去","情况","目的","相关性","没有","数据分析","一个","(","在","通常","dimensionality","必备","解","clustering","压缩","监督","数据压缩","是","它","或","分析","在于","问题","都","技能","方法","地","其","数据","输入","可视化","众所周知","聚类","reduction","和","无","中","的",")","周知","理解","了解","降维","更好","有趣","寻找"," ","步骤","噪","学习","。"],"title":"机器学习无监督学习","title_tokens":["学习","机器","监督","无"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E8%87%AA%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/","text":"自监督学习是监督学习的一个特例，它与众不同，值得单独归为一类。自监督学习是没有 人工标注的标签的监督学习，你可以将它看作没有人类参与的监督学习。标签仍然存在(因为 总要有什么东西来监督学习过程)，但它们是从输入数据中生成的，通常是使用启发式算法生 成的。 举个例子，自编码器(autoencoder)是有名的自监督学习的例子，其生成的目标就是未经 修改的输入。同样，给定视频中过去的帧来预测下一帧，或者给定文本中前面的词来预测下一个词， 都是自监督学习的例子[这两个例子也属于时序监督学习(temporally supervised learning)，即用 未来的输入数据作为监督]。注意，监督学习、自监督学习和无监督学习之间的区别有时很模糊， 这三个类别更像是没有明确界限的连续体。自监督学习可以被重新解释为监督学习或无监督学 习，这取决于你关注的是学习机制还是应用场景。","text_tokens":["归为","文本","下","什么","learning","作为","目标","未来","值得","一个","体","被","将","因为","习","有名","监督","人工","与众不同","存在","或","标签","有时","码器","预测","界限","你","无",")","为","过去","仍然","不同","]","但","生","连续","场景","应用","总要","之间","给定","看作","模糊","更","没有","一帧","区别","就是","标注","是","它们","编码","可以","发式","supervised","中","使用","的","重新","两个","人类","autoencoder","解释","temporally","成","还是","特例","参与","编码器","，","时序","举个","像是","(","通常","明确","东西","关注","未经","生成","也","一类","即用","其","数据","例子","输入","帧","和","启发","启发式","取决于","同样","前面","是从","学","类别"," ","学习","注意","三个","取决","、","算法","单独","机制","视频","自","词","属于","[","这","它","都","词来","修改","来","过程","有","很","。","或者"],"title":"机器学习 自监督学习","title_tokens":["自","监督"," ","学习","机器"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99/%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99-Apriori%E7%AE%97%E6%B3%95/","text":"关联规则学习方法能够提取出对数据中的变量之间的关系的最佳解释。比如说一家超市的销售数据中存在规则 {洋葱，土豆}=> {汉堡}，那说明当一位客户同时购买了洋葱和土豆的时候，他很有可能还会购买汉堡肉。 例子： Apriori 算法（Apriori algorithm） Eclat 算法（Eclat algorithm） FP-growth Apriori算法是一种挖掘关联规则的算法，用于挖掘其内含的、未知的却又实际存在的数据关系，其核心是基于两阶段频集思想的递推算法 。 Apriori算法分为两个阶段： 寻找频繁项集 由频繁项集找关联规则 算法缺点： 在每一步产生侯选项目集时循环产生的组合过多，没有排除不应该参与组合的元素； 每次计算项集的支持度时，都对数据库中 的全部记录进行了一遍扫描比较，需要很大的I/O负载。","text_tokens":["数据库","肉","未知","阶段","（","能够","产生","一位",">","存在","方法","购买","比较","规则学习","思想","不","之间","用于","：","汉堡","比如说","频集","递推","没有","当","排除","是","客户","实际","应该","扫描","关联","了","全部","销售","一遍","关系","中","的","两个","找","那","项集","变量","解释","algorithm","eclat","对","fp","他","可能","元素","参与","，","同时","内含","出对","洋葱","很大","记录","缺点","却","还会","在","核心","支持","i","时候","数据","例子","其","需要","组合","-","由","每","和","计算","挖掘","项目","提取"," ","/","频繁","学习","两","说明","过多","度时","、","最佳","算法","一步","又","比如","growth","apriori","负载","{","；","}","）","一家","分为","集时","都","规则","循环","土豆","一种","侯选","进行","据库","基于","每次","o","有","=","寻找","超市","很","。"],"title":"关联规则 Apriori算法","title_tokens":["关联","算法"," ","apriori","规则"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-autoencoder/","text":"autoencoder异常检测 http://sofasofa.io/tutorials/anomaly_detection/","text_tokens":["异常","sofasofa","http",".","tutorials","_","检测","autoencoder","detection"," ","/",":","io","anomaly"],"title":"异常检测 autoencoder","title_tokens":["异常"," ","autoencoder","检测"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-iTree/","text":"南大周志华老师在2010年提出一个异常检测算法Isolation Forest，在工业界很实用，算法效果好，时间效率高，能有效处理高维数据和海量数据，这里对这个算法进行简要总结。 iTree 提到森林，自然少不了树，毕竟森林都是由树构成的，看Isolation Forest（简称iForest）前，我们先来看看Isolation Tree（简称iTree）是怎么构成的，iTree是一种随机二叉树，每个节点要么有两个女儿，要么就是叶子节点，一个孩子都没有。给定一堆数据集D，这里D的所有属性都是连续型的变量，iTree的构成过程如下： 随机选择一个属性Attr； 随机选择该属性的一个值Value； 根据Attr对每条记录进行分类，把Attr小于Value的记录放在左女儿，把大于等于Value的记录放在右孩子； 然后递归的构造左女儿和右女儿，直到满足以下条件： 传入的数据集只有一条记录或者多条一样的记录； 树的高度达到了限定高度； iTree构建好了后，就可以对数据进行预测啦，预测的过程就是把测试记录在iTree上走一下，看测试记录落在哪个叶子节点。iTree能有效检测异常的假设是：异常点一般都是非常稀有的，在iTree中会很快被划分到叶子节点，因此可以用叶子节点到根节点的路径h(x)长度来判断一条记录x是否是异常点；对于一个包含n条记录的数据集，其构造的树的高度最小值为log(n)，最大值为n-1，论文提到说用log(n)和n-1归一化不能保证有界和不方便比较，用一个稍微复杂一点的归一化公式：$$s(x,n) = 2^{(-\\frac{h(x)}{c(n)})}$$,$$ c(n) = 2H(n − 1) − (2(n − 1)/n), 其中 H(k) = ln(k) + \\xi，\\xi为欧拉常数$$ $s(x,n)$就是记录x在由n个样本的训练数据构成的iTree的异常指数，$s(x,n)$取值范围为[0,1]，越接近1表示是异常点的可能性高，越接近0表示是正常点的可能性比较高，如果大部分的训练样本的s(x,n)都接近于0.5，说明整个数据集都没有明显的异常值。 随机选属性，随机选属性值，一棵树这么随便搞肯定是不靠谱，但是把多棵树结合起来就变强大了； iForest iTree搞明白了，我们现在来看看iForest是怎么构造的，给定一个包含n条记录的数据集D，如何构造一个iForest。iForest和Random Forest的方法有些类似，都是随机采样一一部分数据集去构造每一棵树，保证不同树之间的差异性，不过iForest与RF不同，采样的数据量$Psi$不需要等于n，可以远远小于n，论文中提到采样大小超过256效果就提升不大了，明确越大还会造成计算时间的上的浪费，为什么不像其他算法一样，数据越多效果越好呢，可以看看下面这两个个图， 左边是元素数据，右边是采样了数据，蓝色是正常样本，红色是异常样本。可以看到，在采样之前，正常样本和异常样本出现重叠，因此很难分开，但我们采样之和，异常样本和正常样本可以明显的分开。 除了限制采样大小以外，还要给每棵iTree设置最大高度$l=ceiling(log_2^\\Psi)$，这是因为异常数据记录都比较少，其路径长度也比较低，而我们也只需要把正常记录和异常记录区分开来，因此只需要关心低于平均高度的部分就好，这样算法效率更高，不过这样调整了后，后面可以看到计算$h(x)$需要一点点改进，先看iForest的伪代码： IForest构造好后，对测试进行预测时，需要进行综合每棵树的结果，于是$$s(x,n) = 2^{(-\\frac{E(h(x))}{c(n)})}$$ $E(h(x))$表示记录x在每棵树的高度均值，另外h(x)计算需要改进，在生成叶节点时，算法记录了叶节点包含的记录数量，这时候要用这个数量$Size$估计一下平均高度，h(x)的计算方法如下： 处理高维数据 在处理高维数据时，可以对算法进行改进，采样之后并不是把所有的属性都用上，而是用峰度系数Kurtosis挑选一些有价值的属性，再进行iTree的构造，这跟随机森林就更像了，随机选记录，再随机选属性。 只使用正常样本 这个算法本质上是一个无监督学习，不需要数据的类标，有时候异常数据太少了，少到我们只舍得拿这几个异常样本进行测试，不能进行训练，论文提到只用正常样本构建IForest也是可行的，效果有降低，但也还不错，并可以通过适当调整采样大小来提高效果。 全文完，转载请注明出处：http://www.cnblogs.com/fengfenggirl/p/iForest.html （1） iForest具有线性时间复杂度。因为是ensemble的方法，所以可以用在含有海量数据的数据集上面。通常树的数量越多，算法越稳定。由于每棵树都是互相独立生成的，因此可以部署在大规模分布式系统上来加速运算。 （2） iForest不适用于特别高维的数据。由于每次切数据空间都是随机选取一个维度，建完树后仍然有大量的维度信息没有被使用，导致算法可靠性降低。高维空间还可能存在大量噪音维度或无关维度（irrelevant attributes），影响树的构建。对这类数据，建议使用子空间异常检测（Subspace Anomaly Detection）技术。此外，切割平面默认是axis-parallel的，也可以随机生成各种角度的切割平面，详见“On Detecting Clustered Anomalies Using SCiForest”。 （3） iForest仅对Global Anomaly 敏感，即全局稀疏点敏感，不擅长处理局部的相对稀疏点 （Local Anomaly）。目前已有改进方法发表于PAKDD，详见“Improving iForest with Relative Mass”。 （4） iForest推动了重心估计（Mass Estimation）理论发展，目前在分类聚类和异常检测中都取得显著效果，发表于各大顶级数据挖掘会议和期刊（如SIGKDD，ICDM，ECML）。 实现： https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html 注意：提供的所有参数都要一一进行分析 实现： 主要命令 http://help.aliyun-inc.com/internaldoc/detail/34584.html?spm=a2c1f.8259796.2.198.791296d5Wo21KP iforest训练命令 https://pai.dw.alibaba-inc.com/component/detail/453?projectId=20212&spm=a2c3x.12342929.0.0.661d4a9bFxmP7T 预测命令 https://pai.dw.alibaba-inc.com/component/detail/227?projectId=20212&spm=a2c3x.12342929.0.0.661d4a9bFxmP7T","text_tokens":["把","选择","下面","树","stable","一个","选","被","因为","监督","一棵树","可行","分布式系统","存在","或","如果","方法","预测","训练样本","含有","到","节点","比较","之后","价值","而","能","projectid","仍然","不同","]","detection","一般","挑选","样本","help","modules","稀疏","仅","落","不像","平面","以下","取得","其他","kurtosis","random","其中","理论","个","区分","整个","改进","attributes","注明","构成","提到","明白","取值","的","两个","dw","呢","不能","由于","伪","二叉","improving","有时候","还要","判断","类标","attr","维度","各大","假设","限定","随机","说用","记录","上来","在","256","明确","无关","relative","要么","于","sigkdd","部分","维空间","起来","左边","本质","453","也","sklearn","可能性","-","此外","工业","限制","结果","异常","业界","类似","value","20212"," ","/","component","欧拉","布式","说明","降低","不是","一样","保证","计算方法","默认","重叠","ceiling","综合","一点点","效果","{","超过","期刊","[","线性","很快","661d4a9bfxmp7t","指数","detail","老师","效率高","哪个","工业界","irrelevant","大部分","p","啦","每次","这里","x","有","fengfenggirl","少不了","一","tree","造成","什么","用","这类","系统","多","分布式","构建","子","系数","“","包含","舍得","这时候","右边","com","集都","公式","数据挖掘","属性","信息","均值","无","森林","parallel","海量","拿","常数","越好","前","但","明显","叶","一部分","之间","之前","路径","：","anomaly","发展","递归","没有","具有","cnblogs","aliyun","跟","不错","局部","可以","各种","顶级","条件","并","与","一部","了","这时","更高","\\","中","使用","关心","先","很难","女儿","&","变量","论文","测试","怎么","我们","可能","forest","最小","(","有效","是否","通常","稍微","可靠","3","0.5","axis","h","空间","平均","其","独立","显著效果","有些","每","0.0","挖掘","条","异性","远远","简称","l","如","学习","谱","出现","参数","划分","数据量","isolationforest","；","）","一点","一棵","角度","ecml","分析","都","on","先看","非常","低","大值","所有","导致","高维","请","等于","34584","iforest","大部","=","一一","长度","训练","数量","规模","提升","。","对于","集","”","以外","根据","差异性","擅长","只用","走","差异","（","放在","红色","代码","出处","size","稀有","然后","大量","pai","psi","http","小于","归一化","大小","聚类","大于",":","连续型","范围","每个","为","而是","之","毕竟","上","好","越大","几个",".","用于","给定","上面","要","更","最大","rf","是","方便","如下","达到","internaldoc","命令","scikit","处理","树后","适当","显著","是因为","global","峰度","复杂度","太少","clustered","using","点","estimation","不适","噪音","isolation","元素","强大","，","实现","这样",",","提出","高","learn","generated","最大值","越","集去","年","2","像","详见","就","如何","加速","看到","时候","数据","需要","少","ensemble","with","计算","icdm","anomalies","根","高度","注意","spm","切","简要","多条","k","看","后面","只","$","}","subspace","这","选取","后","表示","实用","一下","大规模","https","这个","会","为什么","再","www","多棵","运算","满足","采样","来","另外","技术","复杂","最小值","调整","_","建议","是否是","不大","?","或者","大","估计","转载","传入","227","周志华","设置","xi","部署","可靠性","每棵","+","^","提高","大规","会议","低于","有时","org","因此","一堆","看看",")","搞","1","少到","于是","稳定","每条","e","该","连续","随便","不","一条","开来","直到","点点","2.198","接近","孩子","2h","即","有界","就是","检测","pakdd","4","变","切割","−","html","给","左","总结","构造","分布","d","已有","肯定","目前","local","791296d5wo21kp","对","c","建完","正常","时间","中会","浪费","敏感","所以","提供","不了","全文","结合","蓝色","南","互相","影响","通过","detecting","sciforest","生成","frac","这么","全文完","全局","右","由","图","和","现在","一些","二叉树","ln","值","不靠","0","log","mass","时","相对","自然","2010","还","但是","特别","发表","不过","重心","a2c3x.12342929","算法","n","分开","s","推动","只有","a2c1f.8259796","进行","一种","alibaba","叶子","效率","inc","好后","分类","过程","主要","itree","除了","很"],"title":"异常检测 iTree","title_tokens":["异常"," ","itree","检测"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-iTree/#itree","text":"提到森林，自然少不了树，毕竟森林都是由树构成的，看Isolation Forest（简称iForest）前，我们先来看看Isolation Tree（简称iTree）是怎么构成的，iTree是一种随机二叉树，每个节点要么有两个女儿，要么就是叶子节点，一个孩子都没有。给定一堆数据集D，这里D的所有属性都是连续型的变量，iTree的构成过程如下： 随机选择一个属性Attr； 随机选择该属性的一个值Value； 根据Attr对每条记录进行分类，把Attr小于Value的记录放在左女儿，把大于等于Value的记录放在右孩子； 然后递归的构造左女儿和右女儿，直到满足以下条件： 传入的数据集只有一条记录或者多条一样的记录； 树的高度达到了限定高度； iTree构建好了后，就可以对数据进行预测啦，预测的过程就是把测试记录在iTree上走一下，看测试记录落在哪个叶子节点。iTree能有效检测异常的假设是：异常点一般都是非常稀有的，在iTree中会很快被划分到叶子节点，因此可以用叶子节点到根节点的路径h(x)长度来判断一条记录x是否是异常点；对于一个包含n条记录的数据集，其构造的树的高度最小值为log(n)，最大值为n-1，论文提到说用log(n)和n-1归一化不能保证有界和不方便比较，用一个稍微复杂一点的归一化公式：$$s(x,n) = 2^{(-\\frac{h(x)}{c(n)})}$$,$$ c(n) = 2H(n − 1) − (2(n − 1)/n), 其中 H(k) = ln(k) + \\xi，\\xi为欧拉常数$$ $s(x,n)$就是记录x在由n个样本的训练数据构成的iTree的异常指数，$s(x,n)$取值范围为[0,1]，越接近1表示是异常点的可能性高，越接近0表示是正常点的可能性比较高，如果大部分的训练样本的s(x,n)都接近于0.5，说明整个数据集都没有明显的异常值。 随机选属性，随机选属性值，一棵树这么随便搞肯定是不靠谱，但是把多棵树结合起来就变强大了；","text_tokens":["对于","集","把","用","选择","传入","根据","树","走","xi","构建","一个","选","（","被","放在","+","^","稀有","包含","然后","一棵树","如果","集都","公式","预测","训练样本","因此","小于","到","一堆","看看","属性","归一化","大于","节点","连续型","森林","比较","范围","每个","能",")","为","常数","1","搞","前","毕竟","上","]","每条","明显","该","一般","样本","连续","随便","好","不","一条","直到","落","以下","接近","孩子","给定","：","路径","2h","递归","没有","最大","其中","有界","就是","个","整个","检测","是","方便","如下","变","达到","可以","−","条件","构成","提到","了","取值","左","\\","构造","的","d","两个","先","不能","女儿","肯定","变量","二叉","对","点","论文","c","测试","怎么","我们","判断","isolation","可能","正常","attr","强大","，","中会",",","假设","forest","限定","高","最小","随机","说用","最大值","记录","越","(","不了","在","有效","是否","稍微","要么","于","结合","部分","2","起来","0.5","就","h","frac","其","数据","这么","可能性","右","-","由","和","二叉树","ln","值","异常","不靠","条","0","log","value","根","简称","自然"," ","/","高度","欧拉","但是","说明","谱","一样","保证","多条","n","划分","k","看","；","{","s","$","}","）","一点","[","一棵","后","都","很快","只有","指数","表示","一下","非常","多棵","哪个","一种","进行","满足","大部分","大值","来","叶子","所有","复杂","最小值","啦","这里","分类","等于","过程","iforest","有","x","是否是","=","长度","少不了","itree","训练","大部","tree","。","或者"],"title":"iTree","title_tokens":["itree"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-iTree/#iforest","text":"iTree搞明白了，我们现在来看看iForest是怎么构造的，给定一个包含n条记录的数据集D，如何构造一个iForest。iForest和Random Forest的方法有些类似，都是随机采样一一部分数据集去构造每一棵树，保证不同树之间的差异性，不过iForest与RF不同，采样的数据量$Psi$不需要等于n，可以远远小于n，论文中提到采样大小超过256效果就提升不大了，明确越大还会造成计算时间的上的浪费，为什么不像其他算法一样，数据越多效果越好呢，可以看看下面这两个个图， 左边是元素数据，右边是采样了数据，蓝色是正常样本，红色是异常样本。可以看到，在采样之前，正常样本和异常样本出现重叠，因此很难分开，但我们采样之和，异常样本和正常样本可以明显的分开。 除了限制采样大小以外，还要给每棵iTree设置最大高度$l=ceiling(log_2^\\Psi)$，这是因为异常数据记录都比较少，其路径长度也比较低，而我们也只需要把正常记录和异常记录区分开来，因此只需要关心低于平均高度的部分就好，这样算法效率更高，不过这样调整了后，后面可以看到计算$h(x)$需要一点点改进，先看iForest的伪代码： IForest构造好后，对测试进行预测时，需要进行综合每棵树的结果，于是$$s(x,n) = 2^{(-\\frac{E(h(x))}{c(n)})}$$ $E(h(x))$表示记录x在每棵树的高度均值，另外h(x)计算需要改进，在生成叶节点时，算法记录了叶节点包含的记录数量，这时候要用这个数量$Size$估计一下平均高度，h(x)的计算方法如下：","text_tokens":["集","什么","把","用","以外","估计","下面","差异性","树","多","设置","差异","一个","每棵","红色","代码","因为","size","^","包含","一棵树","这时候","右边","低于","方法","psi","预测","因此","小于","看看","大小","均值","比较","节点","而","搞",")","越好","之","不同","上","于是","e","但","明显","叶","样本","好","不","一部分","越大","开来","不像","之间","点点","之前","给定","路径","：","其他","要","random","最大","个","区分","rf","是","改进","如下","可以","与","明白","了","一部","提到","这时","给","更高","\\","构造","是因为","中","的","d","两个","关心","呢","很难","伪","对","c","论文","测试","还要","怎么","我们","元素","正常","，","时间","这样","浪费",",","forest","随机","记录","越","(","在","256","明确","集去","部分","蓝色","2","就","左边","h","如何","生成","也","看到","平均","frac","其","数据","时候","有些","需要","少","-","每","和","图","现在","计算","限制","结果","异常","条","类似","log","异性","远远","时","l"," ","还","高度","出现","不过","一样","保证","算法","计算方法","n","数据量","分开","重叠","后面","ceiling","综合","一点点","效果","只","s","$","{","超过","}","一点","一棵","这","后","都","表示","一下","这个","先看","会","为什么","低","进行","采样","来","另外","效率","调整","好后","等于","iforest","_","=","不大","x","长度","itree","数量","提升","一","除了","。","造成"],"title":"iForest","title_tokens":["iforest"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-iTree/#_1","text":"在处理高维数据时，可以对算法进行改进，采样之后并不是把所有的属性都用上，而是用峰度系数Kurtosis挑选一些有价值的属性，再进行iTree的构造，这跟随机森林就更像了，随机选记录，再随机选属性。","text_tokens":["不是","把","，","算法","用","kurtosis","随机","更","选","记录","在","系数","这","改进","跟","像","就","都","可以","并","数据","了","再","属性","处理","进行","采样","一些","之后","构造","价值","森林","的","所有","高维","而是","峰度","上","时","有","对","itree","挑选","。"],"title":"处理高维数据","title_tokens":["高维","处理","数据"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-iTree/#_2","text":"这个算法本质上是一个无监督学习，不需要数据的类标，有时候异常数据太少了，少到我们只舍得拿这几个异常样本进行测试，不能进行训练，论文提到只用正常样本构建IForest也是可行的，效果有降低，但也还不错，并可以通过适当调整采样大小来提高效果。 全文完，转载请注明出处：http://www.cnblogs.com/fengfenggirl/p/iForest.html （1） iForest具有线性时间复杂度。因为是ensemble的方法，所以可以用在含有海量数据的数据集上面。通常树的数量越多，算法越稳定。由于每棵树都是互相独立生成的，因此可以部署在大规模分布式系统上来加速运算。 （2） iForest不适用于特别高维的数据。由于每次切数据空间都是随机选取一个维度，建完树后仍然有大量的维度信息没有被使用，导致算法可靠性降低。高维空间还可能存在大量噪音维度或无关维度（irrelevant attributes），影响树的构建。对这类数据，建议使用子空间异常检测（Subspace Anomaly Detection）技术。此外，切割平面默认是axis-parallel的，也可以随机生成各种角度的切割平面，详见“On Detecting Clustered Anomalies Using SCiForest”。 （3） iForest仅对Global Anomaly 敏感，即全局稀疏点敏感，不擅长处理局部的相对稀疏点 （Local Anomaly）。目前已有改进方法发表于PAKDD，详见“Improving iForest with Relative Mass”。 （4） iForest推动了重心估计（Mass Estimation）理论发展，目前在分类聚类和异常检测中都取得显著效果，发表于各大顶级数据挖掘会议和期刊（如SIGKDD，ICDM，ECML）。 实现： https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.IsolationForest.html 注意：提供的所有参数都要一一进行分析","text_tokens":["集","用","”","转载","估计","这类","只用","擅长","树","系统","多","分布式","stable","构建","部署","一个","（","可靠性","每棵","被","子","“","出处","因为","提高","监督","大规","会议","舍得","com","可行","分布式系统","大量","存在","或","有时","方法","org","数据挖掘","含有","http","因此","大小","信息","聚类",":","无","parallel","海量","拿","1","仍然","少到","上","稳定","但","detection","样本","不","modules","稀疏","仅","几个",".","平面","用于","：","取得","上面","anomaly","发展","要","没有","即","理论","具有","cnblogs","检测","是","attributes","改进","pakdd","不错","4","局部","注明","切割","可以","各种","顶级","html","并","提到","了","scikit","处理","树后","适当","显著","分布","中","使用","的","global","不能","复杂度","由于","已有","太少","目前","clustered","using","local","improving","对","有时候","论文","点","estimation","测试","建完","我们","不适","类标","正常","可能","噪音","，","时间","实现","维度","各大","高","generated","敏感","learn","随机","越","所以","上来","在","全文","通常","提供","无关","relative","于","可靠","sigkdd","互相","detecting","2","维空间","通过","影响","本质","axis","详见","sciforest","3","生成","也","加速","空间","sklearn","时候","数据","独立","全文完","显著效果","需要","全局","-","此外","和","ensemble","with","挖掘","icdm","异常","anomalies","mass","相对","如"," ","/","还","学习","注意","布式","特别","降低","切","参数","发表","重心","算法","默认","isolationforest","只","效果","期刊","）","subspace","这","选取","推动","角度","ecml","分析","线性","都","on","大规模","https","这个","www","运算","irrelevant","进行","采样","来","技术","所有","调整","p","复杂","请","高维","每次","导致","分类","iforest","有","fengfenggirl","建议","一一","训练","数量","规模","。"],"title":"只使用正常样本","title_tokens":["样本","只","正常","使用"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-iTree/#_3","text":"主要命令 http://help.aliyun-inc.com/internaldoc/detail/34584.html?spm=a2c1f.8259796.2.198.791296d5Wo21KP iforest训练命令 https://pai.dw.alibaba-inc.com/component/detail/453?projectId=20212&spm=a2c3x.12342929.0.0.661d4a9bFxmP7T 预测命令 https://pai.dw.alibaba-inc.com/component/detail/227?projectId=20212&spm=a2c3x.12342929.0.0.661d4a9bFxmP7T","text_tokens":["spm","a2c3x.12342929",".","227","2.198","aliyun","com","pai","661d4a9bfxmp7t","453","https","detail","internaldoc","a2c1f.8259796","预测","html","http","命令","-","0.0",":","alibaba","inc","dw","projectid","34584","主要","iforest","20212","=","?","791296d5wo21kp"," ","/","训练","component","&","help"],"title":"实现：","title_tokens":["：","实现"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE-CompactDescription/","text":"In this section, we first describe the compact description formalism to describe a group of instances. Subsequently, we propose algorithms for selecting diverse instances for querying and to generate succinct interpretable rules using compact description. Our goal is to select a small subset of the most relevant and “compact” (by volume) subspaces which together contain all the instances in a group that we want to describe. We treat this problem as a specific instance of the set covering problem. This approach can be potentially interpreted as a form of non-parametric clustering. Applications of Compact Description. Compact descriptions have multiple uses including: Discovery of diverse classes of anomalies very quickly by querying instances from different subspaces of the description. Interpretable Explanations from Subspaces. Descriptions (of anomalies) should be simple . Subspaces in the case of tree-based models are defined by ranges of feature values which can be translated to predicate rules. Descriptions should be precise , i.e., they should include few nominals (false-positives). The absence of this property would result in descriptions with high recall but low precision.","text_tokens":["generate","”","different","specific","and","parametric","“","as","of","treat","covering","feature","subspaces","property","very","instances","subsequently","translated",":","group","non",")","the","all","discovery","relevant","e","we",".","ranges","would","can","set","should","absence","high","for","few","interpreted","simple","defined","to","instance","nominals","they","multiple","goal","small","but","using","descriptions","include","our","explanations","selecting","uses","interpretable",",","positives","description","diverse","(","precision","formalism","clustering","first","succinct","i","recall","from","by","is","propose","-","compact","low","with","volume","be","a","select","applications","have","potentially","tree","anomalies","based","this","values","section"," ","result","case","classes","contain","precise","querying","form","in","rules","describe","that","want","are","subset","false","together","most","approach","algorithms","quickly","models","which","including","problem","predicate"],"title":"异常检测 AADE CompactDescription","title_tokens":["异常","检测"," ","aade","compactdescription"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE-Diversity-based/","text":"It is likely that different types of instances belong to different subspaces in the original feature space.","text_tokens":["the","in","is","space","of",".","feature","instances","it","different","to"," ","types","belong","subspaces","that","likely","original"],"title":"异常检测 AADE Diversity based","title_tokens":["异常","based","diversity","检测"," ","aade"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE-ExplanationsFromSubspaces/","text":"Interpretable Explanations from Subspaces. Descriptions (of anomalies) should be simple . Subspaces in the case of tree-based models are defined by ranges of feature values which can be translated to predicate rules. Descriptions should be precise , i.e., they should include few nominals (false-positives). The absence of this property would result in descriptions with high recall but low precision.","text_tokens":["case","interpretable",".","ranges","precise","can","would",",","positives","should","absence","high","(","in","rules","few","precision","of","feature","subspaces","i","property","are","simple","false","defined","recall","from","by","-","to","low","translated","with","be","nominals",")","they","the","based","anomalies","models","but","this","values","e"," ","descriptions","which","result","tree","include","explanations","predicate"],"title":"异常检测 AADE ExplanationsFromSubspaces","title_tokens":["异常","检测"," ","aade","explanationsfromsubspaces"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE-GLAD-FSS/","text":"GLocalized Anomaly Detection (GLAD) — which allows a human analyst to continue using anomaly detection ensembles with global behavior by learning their local relevance in different parts of the feature space via label feedback. Our GLAD algorithm automatically learns the local relevance of each ensemble member in the feature space via a neural network using the label feedback from a human analyst. since we are in an active learning setting for anomaly detection, we need to consider two important aspects: (a) Number of labeled examples is very small (possibly none), and (b) To reduce the effort of the human analyst, the algorithm needs to be primed so that the likelihood of discovering anomalies is very high from the first feedback iteration itself. Subsequently, the algorithm receives label feedback from a human analyst and determines whether the ensemble made an error (i.e., anomalous in- stances are ranked at the top and scores of anomalies are higher than scores of nominals).","text_tokens":["likelihood","number","learning","consider","different","and","of","feature","examples","analyst","very","via","subsequently",":","an",")","human","the","glad","neural","—","e","detection","we","parts","stances","space",".","each","anomaly","high","glocalized","for","relevance","discovering","member","active","two","since","need","to","whether","determines","label","anomalous","so","nominals","global","small","using","local","labeled","algorithm","effort","reduce","our","learns","scores","automatically",",","possibly","higher","(","first","their","i","behavior","from","by","is","itself","b","-","made","than","ensemble","with","be","a","needs","ranked","anomalies","error"," ","important","continue","at","in","ensembles","aspects","that","are","setting","iteration","network","feedback","none","top","which","allows","primed","receives"],"title":"异常检测 AADE GLAD FSS","title_tokens":["异常","fss","glad","检测"," ","aade"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE-ScoreFunction/","text":"$Score(x) = w · z$ Our previous discussion then suggests that the optimal hyperplane can now be learned efficiently by greedily asking the analyst to label the most anomalous instance in each feedback iteration. Figure 10 illustrates how BAL changes the anomaly score contours across feedback iterations on the synthetic dataset using an isolation forest with 100 trees.","text_tokens":["how","isolation","now","efficiently","10","suggests",".","each","can","w","forest","greedily","z","100","learned","anomaly","iterations","(","in","$","hyperplane","discussion","changes","then","score","·","that","trees","asking","on","by","analyst","iteration","most","to","instance","optimal","label","anomalous","be","illustrates","an","with",")","the","feedback","previous","figure","bal","dataset","x","using","=","contours"," ","our","synthetic","across"],"title":"异常检测 AADE ScoreFunction","title_tokens":["异常","检测"," ","aade","scorefunction"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE-StreamingData/","text":"In the streaming setting, we assume that the data is input to the algorithm continuously in windows of size K and is potentially unlimited.","text_tokens":[".","streaming","data",",","k","unlimited","input","and","in","of","size","that","is","setting","continuously","to","windows","assume","the","potentially","algorithm"," ","we"],"title":"异常检测 AADE StreamingData","title_tokens":["异常","streamingdata","检测"," ","aade"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE-Tree-based/","text":"Ensemble of tree-based anomaly detectors have several attractive properties that make them an ideal candidate for active learning : They can be employed to construct large ensembles inexpensively. Treating the nodes of tree as ensemble members allows us to both focus our feedback on fine-grained subspaces as well as increase the capacity of the model in terms of separating anomalies from nominals. Since some of the tree-based models such as Isolation Forest (IFOR) (Liu et al., 2008), HS Trees (HST) (Tan, Ting, & Liu, 2011), and RS Forest (RSF) (Wu, Zhang, Fan, Edwards, & Yu, 2014) are state-of-the-art unsupervised detectors (Emmott et al., 2015; Domingues, Filippone, Michiardi, & Zouaoui, 2018), it is a significant gain if their performance can be improved with minimal label feedback . In this work, we will focus mainly on IFOR because it performed best across all datasets (Emmott et al., 2015). However, we also present results on HST and RSF wherever appli- cable. Isolation forest (Liu et al., 2008) is a state-of-the-art ensemble anomaly detector.","text_tokens":["fan","learning","nodes","several","because","and","grained","as","of","wu","mainly","2015","zhang","subspaces","both",":","large","gain","an","make",")","the","2011","all","capacity","treating","we","members","model","emmott","performed",".","wherever","can","unsupervised","anomaly","also","hst","for","results","fine","ideal","active",";","will","separating","trees","rsf","since","increase","cable","al","to","label","nominals","they","filippone","&","michiardi","state","significant","however","our","isolation","performance","et","datasets",",","forest","tan","liu","some","(","inexpensively","such","well","their","work","best","from","is","2008","properties","-","improved","ensemble","with","detector","be","a","2018","have","based","focus","anomalies","construct","this"," ","art","across","present","2014","detectors","us","attractive","zouaoui","in","ensembles","yu","hs","minimal","that","on","are","ting","domingues","if","it","ifor","terms","feedback","rs","models","employed","appli","candidate","them","edwards","tree","allows"],"title":"异常检测 AADE Tree based","title_tokens":["异常","based","检测"," ","aade","tree"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE/","text":"we study the problem of active learning to automatically tune ensemble of anomaly detectors to maximize the number of true anomalies discovered. First, we present an important insight that explains the practical successes of AD ensembles and how ensembles are naturally suited for active learning. This insight also allows us to relate the greedy query selection strategy to uncertainty sampling, with implications for label-efficient learning. Second, we present several algorithms for active learning with tree-based AD ensembles . A novel formalism called compact description (CD) is developed to describe the discovered anomalies. We propose algorithms based on the CD formalism to improve the diversity of discovered anomalies and to generate rule sets for improved interpretability of anomalous instances. To handle streaming data setting , we present a novel data drift detection algorithm that not only detects the drift robustly, but also allows us to take corrective actions to adapt the detector in a principled manner. Third, we present a novel algorithm called GLocalized Anomaly Detection (GLAD) for active learning with generic AD ensembles and an approach to generate succinct explanations from the resulting models. GLAD allows end-users to retain the use of simple and understandable global anomaly detectors by automatically learning their local relevance to specific data instances using label feedback. Fourth, we present extensive experiments to evaluate our insights and algorithms with tree-based AD ensembles in both batch and streaming settings . Ensemble of anomaly detectors are shown to perform well in both unsupervised and active learning settings, but their characteristics leading to good performance are not well-understood Why does the average score across ensemble members perform best in most cases (Chiang & Yeh, 2015) instead of other score combination strategies (e.g., min, max, median etc.)? Why does the greedy query selection strategy for active learning almost always per- form best? # We setup a scoring function Score(x) to score data instances $Score(x) = w · z$ Our active learning framework In each iteration of active learning loop, we perform the following steps: 1) Select one or more unlabeled instances from the input dataset D according to a query selection strategy QS; 2) Query the human analyst for labels of selected instances by providing additional information in the form of interpretable rules or explanations; 3) Update the weights of the scoring function based on the aggregate set of labeled and unlabeled instances. The goal of A is to learn optimal weights for maximizing the number of true anomalies shown to the analyst. The key insights presented here are in the context of a linear combination of ensemble scores. Specifically, greedily selecting instances with the highest scores is first of all more likely to reveal anomalies (i.e., true positives), and even if the selected instance is nominal (i.e., false positive), it still helps in learning the decision boundary efficiently. This is an important insight and has significant practical implications.","text_tokens":["how","number","generate","leading","learning","explains","several","aggregate","data","w","even","does","max","input","almost","specific","understood","instead","relate","and","min","weights","diversity","of","experiments","2015","per","generic","still","novel","here","analyst","shown","third","strategy","instances","both","insight","detects",":","unlabeled","an","combination",")","#","practical","the","1","human","specifically","all","glad","end","e","detection","we","members","nominal","developed","drift",".","each","set","unsupervised","strategies","anomaly","query","key","greedily","glocalized","extensive","also","one","successes","for","users","following","average","relevance","called","active",";","cases","or","sampling","simple","decision","loop","true","rule","only","to","why","function","instance","optimal","label","anomalous","resulting","selection","likely","scoring","d","global","goal","always","but","robustly","&","local","using","dataset","framework","labeled","algorithm","significant","update","our","explanations","median","selecting","ad","performance","linear","presented","batch","interpretable","efficiently","uncertainty","automatically","scores","tune","suited",",","streaming","positives","insights","description","learn","manner","perform","(","settings","formalism","score","first","2","well","3","succinct","their","i","implications","actions","good","best","from","by","fourth","selected","study","is","interpretability","-","propose","compact","not","improved","ensemble","with","naturally","take","detector","a","use","select","evaluate","based","anomalies","according","this","additional"," ","important","adapt","across","maximize","context","present","improve","characteristics","setup","detectors","chiang","us","positive","g","retain","form","z","information","boundary","has","in","$","rules","ensembles","·","sets","describe","that","are","on","false","maximizing","setting","iteration","most","etc","approach","if","discovered","reveal","providing","understandable","it","helps","steps","other","highest","second","algorithms","feedback","labels","greedy","models","cd","corrective","handle","principled","x","=","?","problem","efficient","qs","tree","allows","more","yeh"],"title":"异常检测 AADE","title_tokens":["异常"," ","aade","检测"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE/#_1","text":"Ensemble of anomaly detectors are shown to perform well in both unsupervised and active learning settings, but their characteristics leading to good performance are not well-understood Why does the average score across ensemble members perform best in most cases (Chiang & Yeh, 2015) instead of other score combination strategies (e.g., min, max, median etc.)? Why does the greedy query selection strategy for active learning almost always per- form best? # We setup a scoring function Score(x) to score data instances $Score(x) = w · z$","text_tokens":["leading","learning","data","w","does","max","almost","understood","instead","min","and","of","2015","per","shown","strategy","both","instances","combination",")","#","the","e","we","members",".","unsupervised","strategies","anomaly","query","for","average","active","cases","to","why","function","selection","scoring","always","but","&","median","performance",",","perform","(","settings","score","well","their","good","best","-","not","ensemble","a"," ","across","characteristics","setup","detectors","chiang","g","form","z","in","$","·","are","most","etc","other","greedy","x","=","?","yeh"],"title":"","title_tokens":[]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE/#_2","text":"Our active learning framework In each iteration of active learning loop, we perform the following steps: 1) Select one or more unlabeled instances from the input dataset D according to a query selection strategy QS; 2) Query the human analyst for labels of selected instances by providing additional information in the form of interpretable rules or explanations; 3) Update the weights of the scoring function based on the aggregate set of labeled and unlabeled instances. The goal of A is to learn optimal weights for maximizing the number of true anomalies shown to the analyst.","text_tokens":["number","learning","interpretable",".","each","aggregate",",","input","form","information","query","set","learn","perform","one","in","rules","for","update","weights","and","of","following","2","3","active",";","or","on","maximizing","selected","from","by","analyst","loop","is","shown","iteration","strategy","true","instances","to","function","providing",":","unlabeled","optimal","steps","selection","select","a","scoring",")","d","the","1","according","human","labels","based","goal","anomalies","dataset","labeled","framework","additional"," ","qs","we","our","explanations","more"],"title":"","title_tokens":[]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE/#_3","text":"The key insights presented here are in the context of a linear combination of ensemble scores. Specifically, greedily selecting instances with the highest scores is first of all more likely to reveal anomalies (i.e., true positives), and even if the selected instance is nominal (i.e., false positive), it still helps in learning the decision boundary efficiently. This is an important insight and has significant practical implications.","text_tokens":["context","selecting","linear","presented","learning","efficiently","scores",".","positive",",","positives","even","greedily","key","insights","boundary","(","and","in","has","of","first","i","implications","are","still","false","here","selected","decision","is","true","instances","if","to","reveal","it","instance","insight","ensemble","with","helps","likely","combination","a","an","highest",")","specifically","the","all","anomalies","practical","this","e"," ","important","significant","nominal","more"],"title":"","title_tokens":[]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-AADE/#_4","text":"","text_tokens":[],"title":"","title_tokens":[]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-ActiveLearning/","text":"Active learning corresponds to the setup where the learning algorithm can selectively query a human analyst for labels of input instances to improve its prediction accuracy.","text_tokens":["learning","setup","improve","accuracy",".","can","input","query","prediction","for","of","active","selectively","corresponds","analyst","instances","to","where","a","the","human","labels","its","algorithm"," "],"title":"异常检测 ActiveLearning","title_tokens":["异常"," ","检测","activelearning"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-%E4%BB%BB%E5%8A%A1-%E6%8C%91%E6%88%98/","text":"However, this process can be laborious for the human analyst when the number of false-positives is very high. Therefore, in many real-world AD applications including computer security and fraud prevention, the anomaly detector must be configurable by the human analyst to minimize the effort on false positives. One important way to configure the detector is by providing true labels (nominal or anomaly) for a few instances. Anomaly detection poses severe challenges that are not seen in traditional learning prob- lems. First, anomalies are significantly fewer in number than nominal instances. Second, unlike classification problems, no hard decision boundary exists to separate anomalies and nominals. Instead, anomaly detection algorithms train models to compute scores for all instances, and report instances which receive the highest scores as anomalies . The candi- date anomalies in the form of top-ranked data instances are analyzed by a human analyst to identify the true anomalies . Since most of the AD algorithms (Chandola, Banerjee, & Kumar, 2009) only report technical outliers (i.e., data instances which do not fit a nor- mal model as anomalies), the candidate set of anomalies may contain many false-positives, which will significantly increase the effort of human analyst in discovering true anomalies.","text_tokens":["number","nor","learning","data","must","traditional","instead","and","as","of","many","way","fewer","2009","analyst","fraud","banerjee","compute","very","instances","no","technical",")","the","human","exists","all","chandola","e","detection","nominal","model","when",".","can","may","set","anomaly","prob","high","one","for","few","discovering","will","or","since","problems","decision","receive","increase","true","only","to","fit","unlike","analyzed","nominals","report","&","however","effort","candi","seen","ad","hard","scores",",","positives","process","(","kumar","classification","first","lems","i","laborious","configure","by","is","-","not","significantly","than","detector","be","applications","a","poses","ranked","severe","anomalies","this","separate"," ","important","therefore","challenges","minimize","contain","form","boundary","do","in","configurable","date","that","on","are","false","outliers","world","most","train","identify","providing","computer","mal","highest","second","algorithms","labels","models","real","top","security","candidate","which","including","prevention"],"title":"异常检测 任务 挑战","title_tokens":["异常","任务","检测","挑战"," "]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-%E4%BB%BB%E5%8A%A1-%E7%BC%BA%E7%82%B9/","text":"Prior work on anomaly detection has four main shortcomings as explained in the related work section. First, many algorithms are unsupervised in nature and do not provide a way to configure the anomaly detector by the human analyst to minimize the effort on false-positives. There is very little work on principled active learning algorithms. Second, algorithmic work on enhancing the diversity of discovered anomalies is lacking (G ̈ornitz, Kloft, Rieck, & Brefeld, 2013). Third, most algorithms are designed to handle batch data well, but there are few principled algorithms to handle streaming data setting. Fourth, there is little to no work on interpretability and explainability in the context of anomaly detection tasks (Macha & Akoglu, 2018).","text_tokens":["little","learning","there","data","and","diversity","as","many","of","way","analyst","nature","third","very","no",")","the","human","detection","kloft","brefeld","akoglu",".","lacking","rieck","unsupervised","anomaly","main","provide","few","prior","four","̈","active","shortcomings","to","algorithmic","but","&","explained","effort","2013","batch","streaming",",","positives","tasks","designed","(","related","first","well","work","configure","by","fourth","is","interpretability","-","not","enhancing","detector","a","2018","anomalies","section"," ","ornitz","minimize","context","g","do","has","in","on","are","false","setting","macha","most","discovered","second","algorithms","explainability","principled","handle"],"title":"异常检测 任务 缺点","title_tokens":["异常","缺点","任务","检测"," "]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-%E4%BB%BB%E5%8A%A1/","text":"Anomaly detection (AD) task corresponds to identifying the true anomalies from a given set of data instances. AD algorithms score the data instances and produce a ranked list of candidate anomalies, which are then analyzed by a human to discover the true anomalies.","text_tokens":["ad","produce","identifying",".","data",",","set","anomaly","task","(","and","of","then","score","list","are","corresponds","from","by","true","instances","to","analyzed","a",")","ranked","the","algorithms","anomalies","human","given","candidate","detection"," ","which","discover"],"title":"异常检测 任务","title_tokens":["异常"," ","任务","检测"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/AADE/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B-%E5%8F%AF%E8%A7%A3%E9%87%8A%E6%80%A7/","text":"Explanations are useful for debugging, and a good explanation can inspire confidence in end-users. Traditionally, rule set based descriptions (such as in DNF) have been popular because these are easy for users to understand","text_tokens":["useful","popular","confidence","understand",".","explanation","can","because",",","set","easy","(","and","in","dnf","for","as","such","users","traditionally","are","good","inspire","rule","these","-","to","a",")","have","based","debugging","end"," ","descriptions","explanations","been"],"title":"异常检测 可解释性","title_tokens":["异常","可","检测","解释"," ","解释性"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-LDAPCA/","text":"“同样作为线性降维方法，PCA是有监督的降维算法，而LDA是无监督的降维算法。虽然在原理或应用方面二者有一定的区别，但是从这两种方法的数学本质出发，我们不难发现二者有很多共通的特性。” “首先将LDA扩展到多类高维的情况，以和问题1中PCA的求解对应。假设有N个类别，并需要最终将特征降维至d维。因此，我们要找到一个d维投影超平面 ，使得投影后的样本点满足LDA的目标——最大化类间距离和最小化类内距离。”","text_tokens":["”","作为","特性","目标","一定","一个","“","将","发现","最小化","监督","不难","首先","以","或","方法","二者","因此","到","很多","维","找到","无","而","1","降维","—","类间","样本","大化","应用","平面","最终","出发","特征","要","最大","区别","个","是","pca","并","中","的","原理","d","虽然","lda","点","使得","最大化","我们","，","假设","情况","最小","在","本质","问题","数学","距离","需要","扩展","和","同样","方面"," ","类别","两种","但是","算法","n","多类","这","后","线性","超平面","满足","类内","投影","高维","降维至","从","有","共通","对应","。","求解"],"title":"维度灾难特征提取LDAPCA","title_tokens":["灾难","维度","提取","特征提取","特征","ldapca"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/","text":"主成分分析 “在机器学习领域中，我们对原始数据进行特征提取，有时会得到比较高维的特征向量。在这些向量所处的高维空间中，包含很多的冗余和噪声。我们希望通过降维的方式来寻找数据内部的特性，从而提升特征表达能力，降低训练复杂度。主成分分析（Principal Components Analysis，PCA）作为降维中最经典的方法，至今已有100多年的历史，它属于一种线性、非监督、全局的降维算法，是面试中经常被问到的问题” “PCA旨在找到数据中的主成分，并利用这些主成分表征原始数据，从而达到降维的目的。” 主成分分析是一个非监督式算法，它用来创造原始特征的线性组合。新创造出来的特征他们之间都是正交的，也就是没有关联性。具体来说，这些新特征是按它们本身变化程度的大小来进行排列的。第一个主成分代表了你的数据集中变化最为剧烈的特征，第二个主成分代表了变化程度排在第二位的特征，以此类推。 因此，你可以通过限制使用主成分的个数来达到数据降维的目的。例如，你可以仅采用能使累积可解释方差为90%的主成分数量。 “在黄线所处的轴上，数据分布得更为分散，这也意味着数据在这个方向上方差更大。在信号处理领域，我们认为信号具有较大方差，噪声具有较小方差，信号与噪声之比称为信噪比。信噪比越大意味着数据的质量越好，反之，信噪比越小意味着数据的质量越差。由此我们不难引出PCA的目标，即最大化投影方差，也就是让数据在主轴上投影的方差最大。” 你需要在使用主成分分析之前，对数据进行归一化处理。否则，原始数据中特征值数量级最大的那个特征将会主导你新创造出来的主成分特征。 优点 ：主成分分析是一项多用途技术，实用效果非常好。它部署起来快速、简单，也就是说，你可以很方便地测试算法性能，无论使用还是不使用主成分分析。此外，主成分分析还有好几种变体和扩展(如：核主成分分析(kernel PCA)，稀疏主成分分析(sparse PCA))，用以解决特定的问题。 缺点 ：新创造出来的主成分并不具备可解释性，因而在某些情况下，新特征与应用实际场景之间很难建立起联系。此外，你仍然需要手动设置、调整累积可解释方差的阈值。 实现 ： Python - http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html R - https://stat.ethz.ch/R-manual/R-devel/library/stats/html/prcomp.html 最大方差理论 “至此，我们从最大化投影方差的角度解释了PCA的原理、目标函数和求解方法。其实，PCA还可以用其他思路进行分析，比如从最小回归误差的角度得到新的目标函数。但最终我们会发现其对应的原理和求解方法与本文中的是等价的。另外，由于PCA是一种线性降维方法，虽然经典，但具有一定的局限性。我们可以通过核映射对PCA进行扩展得到核主成分分析（KPCA），也可以通过流形映射的降维方法，比如等距映射、局部线性嵌入、拉普拉斯特征映射等，对一些PCA效果不好的复杂数据集进行非线性降维操作。” 最小平方误差理论 “我们还是考虑二维空间中的样本点，如图4.2所示。上一节求解得到一条直线使得样本点投影到该直线上的方差最大。从求解直线的思路出发，很容易联想到数学中的线性回归问题，其目标也是求解一个线性函数使得对应直线能够更好地拟合样本点集合。如果我们从这个角度定义PCA的目标，那么问题就会转化为一个回归问题。” “顺着这个思路，在高维空间中，我们实际上是要找到一个d维超平面，使得数据点到这个超平面的距离平方和最小。以d=1为例，超平面退化为直线，即把样本点投影到最佳直线，最小化的就是所有点到直线的距离平方之和，如图4.3所示。” “最佳直线ω与最大方差法求解的最佳投影方向一致，即协方差矩阵的最大特征值所对应的特征向量，差别仅是协方差矩阵Σ的一个倍数，以及常数偏差，但这并不影响我们对最大值的优化。 ·总结与扩展· 至此，我们从最小平方误差的角度解释了PCA的原理、目标函数和求解方法。不难发现，这与最大方差角度殊途同归，从不同的目标函数出发，得到了相同的求解方法。”","text_tokens":["把","正交","误差","特性","一定","创造","components","stable","一个","被","analysis","认为","数据分布","最小化","监督","如果","方法","这些","到","比较","剧烈","能","原始数据","越差","简单","相同","仍然","不同","映射","样本","等","modules","稀疏","噪声","仅","平面","其他","理论","考虑","关联性","思路","实际","函数","关联","用来","的","原理","由于","至今","意味","信号处理","第一个","第一","排","最大化","普拉斯","类推","情况","方向","在","局限性","stats","维空间","起来","偏差","得到","问题","也","将会","地","sklearn","核主","组合","-","此外","decomposition","扩展","操作","限制","变化"," ","/","降低","具体来说","主轴","比如","100","比","非","效果","如图","表征","问到","它","希望","线性","轴","成分","机器","方差","第二位","让","法","用","黄线","称为","“","能够","发现","包含","不难","经常","解释性","就是说","维","ethz","联系","常数","用以","降维","特定","但","累积","场景","之间","之前","：","至今已有","没有","具备","具有","4.3","局部","可以","并","与","了","意味着","某些","stat","中","使用","很难","限性","矩阵","测试","使得","顺着","我们","因而","量级","prcomp","排列","倍数","最小","本身","(","反之","空间","数学","90%","其","来说","信噪比","实际上","一节","回归","流形","方式","可","表达","好几","如","殊途同归","学习","冗余","最佳","分散","principal","定义","变体","核","）","角度","此类","分析","都","具体","超平面","非常","由此","大值","历史","引出","所有","高维","多用途","所","=","训练","数量","提升","。","最为","无论","devel","下","集","”","作为","目标","也就是说","阈值","例如","（","降维中","多年","优化","个数","以","http","那么","归一化","大小","你","还有",":","二位","为","原始","之","上","以此","平方和","新","联想","主导","好","越大","以及","应用","拉普",".","平方","出发","要","python","小","r","最大","旨在","是","经典","pca","方便","达到","scikit","处理","复杂度","ch","点","为例","还是","同归","，","实现","高","generated","learn","特征向量","殊途","使","最大值","越","越小","就","第二个","用途","距离","数据","4.2","需要","更大","拟合","二维","特征值","能力","按","直线","集中","sparse","所示","属于","这","质量","·","实用","https","这个","点到","会","否则","本文","集合","kernel","来","建立","技术","另外","复杂","投影","调整","向量","那个","manual","等距","拉斯","主","σ","设置","部署","手动","较大","有时","org","因此","很多","二个","特征提取","找到","好几种","ω",")","1","该","拉普拉斯","大化","转化","不","一条","较","最终","采用","快速","几种","所处","特征","多用","即","就是","它们","协方差","程度","嵌入","html","利用","表达能力","非线性","分布","总结","局限","d","虽然","已有","等价","领域","解释","对","性能","从而","一致","最","缺点","内部","面试","kpca","影响","通过","优点","第二","其实","数量级","信号","全局","式","和","一些","起","提取","差别","还","library","、","算法","目的","退化","至此","不好","容易","进行","一种","普拉","线性组合","更为","从","更好","以此类推","寻找","出来","一项","他们","很","解决","得","对应","代表","求解"],"title":"维度灾难特征提取主成分分析","title_tokens":["灾难","成分","主","维度","提取","特征提取","分析","特征"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E7%BA%BF%E6%80%A7%E5%88%A4%E5%88%AB%E5%88%86%E6%9E%90/","text":"线性判别分析 “线性判别分析（Linear Discriminant Analysis，LDA）是一种有监督学习算法，同时经常被用来对数据进行降维。它是Ronald Fisher在1936年发明的，有些资料上也称之为Fisher LDA（Fisher’s Linear Discriminant Analysis）。LDA是目前机器学习、数据挖掘领域中经典且热门的一种算法。” 线性判别分析不是隐含狄利克雷分布，它同样用来构造原始特征集的线性组合。但与主成分分析不同，线性判别分析不会最大化可解释方差，而是最大化类别间的分离程度。 因此，线性判别分析是一种监督式学习方式，它必须使用有标记的数据集。那么，线性判别分析与主成分分析，到底哪种方法更好呢？这要视具体的情况而定，“没有免费的午餐”原理在这里同样适用。 线性判别分析同样依赖于特征值的数量级，你同样需要先对特征值做归一化处理。 优点 ：线性判别分析是一种监督式学习，基于这种方式获取到的特征可以(但并不总是能)提升模型性能。此外，线性判别分析还有一些变体(如二次线性判别分析)，可用来解决特定的问题。 缺点 ：与主成分分析一样，新创造出来的特征不具有可解释性。而且，你同样要手动设置、调整需要保留的特征数量。线性判别分析需要已经标记好的数据，因此，这也让它更加接地气儿。 实现 ： Python - http://scikit-learn.org/stable/modules/generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html#sklearn.discriminant_analysis.LinearDiscriminantAnalysis R - https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/lda.html","text_tokens":["先对","devel","集","气儿","”","主","赖于","创造","设置","stable","（","被","手动","analysis","“","监督","模型","经常","接地","之为","fisher","解释性","方法","org","间","数据挖掘","因此","http","那么","到","归一化","你","分离","ethz","还有",":","更加","二次","能",")","#","而是","原始","不同","降维","上","特定","但","新","大化","好","不","modules","标记","且",".","：","必须","这种","特征","要","python","没有","1936","而且","r","最大","视","具有","是","经典","程度","依赖","可以","并","与","html","scikit","处理","用来","总是","stat","分布","构造","中","发明","使用","的","种","原理","呢","lda","午餐","目前","隐含","领域","ch","解释","对","性能","而定","最大化","linear","，","同时","量级","实现","generated","情况","learn","做","缺点","获取","在","(","lineardiscriminantanalysis","年","优点","问题","保留","数量级","也","sklearn","数据","可用","有些","式","？","需要","组合","-","此外","一些","免费","挖掘","方式","同样","特征值","mass","适用","可","到底","类别"," ","如","/","学习","library","雷","不是","判别分析","、","狄利克","算法","discriminant","一样","称之为","哪","’","这要","热门","变体","资料","s","不会","）","这","它","分析","线性","ronald","https","成分","判别","具体","一种","进行","依赖于","机器","来","线性组合","基于","调整","这里","方差","manual","已经","更好","_","有","数量","出来","让","提升","解决","。"],"title":"维度灾难特征提取线性判别分析","title_tokens":["灾难","判别分析","判别","维度","提取","特征提取","线性","分析","特征"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E8%87%AA%E7%BC%96%E7%A0%81%E6%9C%BA/","text":"自编码机 自编码机是一种人工神经网络，它是用来重新构建原始输入的。例如，图像自编码机是训练来重新表征原始数据的，而非用以区分图片里面的小猫、小狗。 但这有用吗？这里的关键，是在隐含层搭建比输入层和输出层更少数量的神经元。这样，隐含层就会不断学习如何用更少的特征来表征原始图像。 因为是用输入图像来作为目标输出，自编码机被视为无监督学习。它们可被直接使用（如：图像压缩）或按顺序堆叠使用（如：深度学习）。 优点 ：自编码机是人工神经网络中的一种，这表示它们对某些特定类型的数据表现会非常好，比如图像和语音数据。 缺点 ：自编码机是一种人工神经网络。这就是说，它们的优化需要更多的数据来进行训练。它们并不能作为一般意义上的数据降维算法来用。 实现 ： Python - https://keras.io/ R - http://mxnet.io/api/r/index.html","text_tokens":["用","作为","目标","例如","表现","多","构建","（","被","因为","优化","压缩","监督","人工","或","有用","http","小猫","就是说",":","无","而","原始数据","原始","用以","降维","视为","上","特定","但","一般","api","好","。",".","层","类型","：","意义","io","有用吗","特征","更","python","神经","r","就是","区分","是","它们","里面","index","编码","并","html","图像压缩","用来","某些","图片","中","这就是说","使用","重新","的","不能","神经网","人工神经网络","隐含","对","搭建","keras","关键","神经元","，","实现","这样","缺点","在","更少","优点","就","如何","堆叠","数据","输入","图像","？","需要","少","-","和","深度","网络","可","如"," ","/","按","语音","学习","直接","、","算法","机","比如","比","自","非","机是","表征","）","这","它","输出","表示","https","会","非常","小狗","一种","进行","来","这里","顺序","训练","数量","不断","mxnet"],"title":"维度灾难特征提取自编码机","title_tokens":["灾难","维度","机","提取","特征提取","自","特征","编码"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96-%E9%99%8D%E7%BB%B4%E7%AE%97%E6%B3%95/","text":"和集簇方法类似，降维追求并利用数据的内在结构，目的在于使用较少的信息总结或描述数据。 这一算法可用于可视化高维数据或简化接下来可用于监督学习中的数据。许多这样的方法可针对分类和回归的使用进行调整。 例子： 主成分分析（Principal Component Analysis (PCA)） 主成分回归（Principal Component Regression (PCR)） 偏最小二乘回归（Partial Least Squares Regression (PLSR)） Sammon 映射（Sammon Mapping） 多维尺度变换（Multidimensional Scaling (MDS)） 投影寻踪（Projection Pursuit） 线性判别分析（Linear Discriminant Analysis (LDA)） 混合判别分析（Mixture Discriminant Analysis (MDA)） 二次判别分析（Quadratic Discriminant Analysis (QDA)） 灵活判别分析（Flexible Discriminant Analysis (FDA)） 优点： 可处理大规模数据集 无需在数据上进行假设 缺点： 难以搞定非线性数据 难以理解结果的意义","text_tokens":["可视","集","主","quadratic","（","analysis","监督","大规","或","qda","方法","fda","mixture","信息","二次",")","集簇","映射","降维","上","least","难以","flexible","混合","尺度","用于","：","意义","多维","pcr","pca","在于","并","scaling","利用","可视化","处理","非线性","总结","中","mds","使用","的","接下","描述","下来","结构","multidimensional","lda","无需","regression","sammon","linear","，","这样","squares","假设","最小","二乘","缺点","(","pursuit","在","mda","优点","数据","例子","projection","许多","和","结果","回归","简化","接下来","类似","偏","可"," ","component","追求","学习","判别分析","算法","discriminant","灵活","搞定","内在","principal","变换","目的","）","分析","线性","大规模","mapping","成分","plsr","判别","partial","这一","进行","调整","投影","高维","理解","分类","较少","规模","针对","。","寻踪"],"title":"维度灾难 特征提取 降维算法","title_tokens":["灾难","算法","降维","维度","提取"," ","特征提取","特征"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96/","text":"特征提取 特征提取是用来创造一个新的、较小的特征集，但仍能保留绝大部分有用的信息。值得再提的是，特征选取是用来保留原始特征集中的一部分子特征集，而特征提取则是创造全新的特征集。 跟特征选取一样，某些算法内部已经具有了特征提取的机制。最好的案例就是深度学习，它可以通过每一层隐神经层，提取出越来越有用的能表征原始数据的特征。我们在“深度学习”部分已给出相关的讲解。 作为独立的任务，特征提取可以是非监督式的(如主成分分析)或监督式的(如线性判别分析)。","text_tokens":["集","”","作为","值得","创造","一个","子","最好","“","全新","任务","给出","绝大部分","监督","或","有用","信息","特征提取","隐","而","能","原始数据",")","原始","但","新","则","一部分","较","层","特征","神经","小","具有","就是","是","跟","提","可以","一部","了","用来","越来越","仍","某些","的","我们","相关","，","越来","(","在","内部","部分","通过","保留","数据","独立","式","绝大","每","讲解","深度","如"," ","提取","是非","学习","判别分析","、","一样","算法","集中","机制","已","案例","表征","选取","它","分析","线性","如主","成分","判别","再","大部分","出","一层","已经","大部","。"],"title":"维度灾难特征提取","title_tokens":["灾难","维度","提取","特征提取","特征"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E9%80%89%E5%8F%96-%E6%96%B9%E5%B7%AE%E9%98%88%E5%80%BC/","text":"方差阈值 方差阈值会摒弃掉观测样本那些观测值改变较小的特征(即，它们的方差小于某个设定的阈值)。这样的特征的价值极小。 举例来说，如果你有一份公共健康数据，其中96%的人都是35岁的男性，那么去掉“年龄”和“性别”的特征也不会损失重要信息。 由于方差阈值依赖于特征值的数量级，你应该对特征值先做归一化处理。 优点 ：使用方差阈值方式进行数据降维只需一个非常可靠的直觉：特征值不怎么改变的特征，不会带来什么有用的信息。这是在你建模初期进行数据降维相对安全的一种方式。 缺点 ：如果你正在解决的问题并不需要进行数据降维，即便使用了方差阈值也几乎没有什么作用。此外，你需要手工设置、调整方差阈值，这个过程相当具有技术含量。我们建议从一个保守(也就是，较低)的阈值开始。 实现 ： Python - http://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.VarianceThreshold.html R - https://www.rdocumentation.org/packages/caret/versions/6.0-76/topics/nearZeroVar","text_tokens":["96%","什么","作用","”","赖于","阈值","6.0","设置","stable","掉","一个","保守","损失","“","安全","直觉","feature","caret","如果","年龄","手工","org","有用","http","小于","那么","归一化","你","信息","35","性别",":","价值","含量",")","降维","样本","改变","modules","较",".","那些","：","特征","topics","摒弃","python","没有","小","r","即","其中","具有","就是","是","它们","开始","应该","岁","依赖","技术含量","健康","男性","html","相当","了","scikit","处理","带来","selection","使用","的","先","由于","76","nearzerovar","对","怎么","我们","，","量级","这样","几乎","实现","generated","learn","做","缺点","(","在","可靠","优点","问题","数量级","不怎么","初期","也","去掉","sklearn","数据","需要","来说","一份","此外","-","和","值","重要","方式","特征值","相对"," ","/","即便","观测","、","正在","极小","某个","只","不会","variancethreshold","这","举例","都","versions","https","这个","packages","需","会","www","设定","非常","低","依赖于","进行","一种","人","举例来说","技术","调整","并不需要","建模","方差","公共","从","过程","建议","有","_","数量","rdocumentation","解决","。"],"title":"维度灾难特征选取方差阈值","title_tokens":["灾难","方差","维度","选取","阈值","特征"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E9%80%89%E5%8F%96-%E7%9B%B8%E5%85%B3%E6%80%A7%E9%98%88%E5%80%BC/","text":"相关性阈值 相关性阈值会去掉那些高度相关的特征(亦即，这些特征的特征值变化与其他特征非常相似)。它们提供的是冗余信息。 举例来说，如果你有一个房地产数据，其中两个特征分别是“房屋面积（单位：平方英尺）”和“房屋面积（单位：平方米）”，那么，你就可以去掉其中的任何一个（这非常安全，也不会给你的模型带来任何负面影响）。 问题是，你该去掉哪一个特征呢？首先，你应该计算所有特征对的相关系数。而后，如果某个特征对的相关系数大于设定的阈值，那你就可以去掉其中平均绝对相关系数较大的那一个。 优点 ：使用相关性阈值同样只需一个可靠的直觉：相似的特征提供了冗余的信息。对于某些含有强相关性特征较多的数据集，有些算法的稳健性并不好，因此，去掉它们可以提升整个模型的性能(计算速度、模型准确度、模型稳健性，等等)。 缺点 ：同样，你还是必须手动去设置、调整相关性阈值，这同样是个棘手且复杂的过程。此外，如果你设置的阈值过低，那么你将会丢失掉一些有用的信息。无论在什么时候，我们都更倾向于使用那些内置了特征选取的算法。对于没有内置特征提取的算法，主成分分析是一个很好的备用方案。 实现 ： Python - https://gist.github.com/Swarchal/881976176aaeb21e8e8df486903e99d6 R - https://www.rdocumentation.org/packages/caret/versions/6.0-73/topics/findCorrelation","text_tokens":["对于","无论","集","什么","”","主","阈值","相关系数","6.0","多","设置","倾向","相关性","一个","英尺","计算速度","（","掉","手动","系数","“","安全","过低","直觉","将","模型","caret","平方英尺","首先","swarchal","com","较大","如果","负面影响","org","分别","这些","有用","而后","含有","因此","亦","那么","你","信息","大于",":","特征提取",")","该","好","较","且",".","丢失","那些","平方","：","findcorrelation","其他","必须","特征","topics","更","python","没有","github","备用","r","即","其中","准确度","个","整个","是","它们","应该","可以","强","并","与","了","给","某些","带来","关系","使用","的","两个","呢","那","对","性能","还是","我们","相似","相关","平方米","，","实现","881976176aaeb21e8e8df486903e99d6","去","提供","(","缺点","在","面积","于","稳健性","可靠","影响","房屋","优点","就","问题","也","平均","去掉","时候","数据","有些","？","方案","来说","-","此外","单位","和","速度","棘手","一些","绝对","计算","同样","特征值","变化","任何"," ","提取","/","高度","冗余","稳健","负面","73","、","算法","哪","某个","房地","只","不会","）","这","选取","分析","举例","都","versions","https","成分","packages","需","会","www","不好","设定","非常","准确","举例来说","所有","调整","复杂","gist","等等","过程","房地产","有","rdocumentation","提升","很","内置","。","地产"],"title":"维度灾难特征选取相关性阈值","title_tokens":["灾难","相关","维度","选取","阈值","特征","相关性"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E9%80%89%E5%8F%96-%E9%80%90%E6%AD%A5%E6%90%9C%E7%B4%A2/","text":"逐步搜索 逐步搜索是一个基于序列式搜索的监督式特征选取算法。它有两种形式：前向搜索和反向搜索。 对于前向逐步搜索，你从没有任何特征开始。接着，从候选特征集中，选择一个特征来训练模型；然后，保存模型性能最好对应的那个特征；再往下，你不断往训练模型的特征集中添加特征，一次添加一个特征，直到你模型的性能不再提升。 反向逐步搜索的过程相同，只不过顺序相反：从把所有的特征都用于训练模型，接着一次性移除一个特征，直到模型的性能骤降。 我们提及这一算法纯粹是源于某些历史原因。尽管很多教科书都把逐步搜索算法作为一个有效的方法，但它所表现出来的性能总是不及其它监督式方法，比如正则化。逐步搜索有很多明显的缺陷，最致命的一点就是它是一个贪心算法，无法面对未来变化的冲击。我们并不推荐这个算法。","text_tokens":["对于","下","把","面对","作为","选择","未来","反向","表现","逐步","一个","接着","冲击","提及","最好","监督","模型","然后","推荐","源于","方法","很多","你","教科书","原因","添加","相同","保存","前","但","明显","前向","不","。","直到","用于","：","特征","没有","不及","就是","候选","是","开始","并","教科","骤降","序列","某些","总是","的","性能","缺陷","我们","，","相反","其它","一次","最","贪心","有效","式","和","向搜索","往","变化","任何","再往"," ","两种","搜索算法","不过","算法","集中","尽管","比如","致命","；","一点","选取","它","无法","都","化","这个","纯粹","移除","这一","形式","来","历史","基于","所有","那个","一次性","从","不再","顺序","过程","所","有","训练","只不过","出来","搜索","对应","提升","正则","不断"],"title":"维度灾难特征选取逐步搜索","title_tokens":["灾难","维度","选取","搜索","逐步","特征"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E9%80%89%E5%8F%96-%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/","text":"遗传算法是可用于不同任务的一大类算法的统称。它们受进化生物学与自然选择的启发，结合变异与交叉，在解空间内进行高效的遍历搜索。这里有一篇非常棒的简介：“遗传算法背后的原理引入”。 在机器学习领域，遗传算法主要有两大用处。 其一，用于最优化，比如去找神经网络的最佳权重。 其二，是用于监督式特征提取。 这一用例中，“基因”表示单个特征，同时“有机体”表示候选特征集。“种群体”内的每一个有机体都会基于其适应性进行评分，正如在测试数据集上进行模型性能测试。最能适应环境的有机体将会生存下来，并不断繁衍，一直迭代，直至最终收敛于某个最优的解决方案。 优点 ：在穷举搜索不可行的情况下，对高维数据集使用遗传算法会相当有效。当你的算法需要预处理数据却没有内置的特征选取机制(如最近邻分类算法），而你又必须保留最原始的特征(也就是不能用任何主成分分析算法)，遗传算法就成了你最好的选择。这一情况在要求透明、可解释方案的商业环境下时有发生。 缺点 ：遗传算法为你解决方案的实施带来了更高的复杂度，而多数情况下它们都是不必要的麻烦。如果可能的话，主成分分析或其它内置特征选取的算法将会更加高效和简洁。 实现 ： Python - https://pypi.python.org/pypi/deap R - https://cran.r-project.org/web/packages/GA/vignettes/GA.html","text_tokens":["穷举","多数","集","用处","集上","类","”","下","邻","用","主","选择","麻烦","大用","必要","神经网络","一个","最好","“","优化","任务","监督","模型","可行","或","内置","遗传","如果","org","预处理","基因","生存","你","最近","交叉","vignettes",":","特征提取","更加","单个","而",")","为","原始","不同","遍历","cran","不","这一用","不必",".","用于","：","最终","受","必须","测试数据","特征","更","python","神经","没有","r","其二","当","就是","解","权重","候选","是","它们","群体","的话","环境","并","与","html","相当","了","处理","带来","内","使用","的","棒","背后","原理","找","种","下来","解决方案","不能","复杂度","神经网","领域","解释","生物学","性能","对","高效","遗传算法","测试","适应环境","成","project","web","可能","，","同时","有机体","引入","其一","实现","实施","一直","正如","deap","其它","去","最能","情况","例中","最","透明","高","一大","缺点","却","在","有效","(","简洁","生物","结合","于","进化","优点","就","保留","也","空间","将会","要求","其","评分","数据","式","方案","需要","-","适应性","每","和","启发","繁衍","有机","迭代","任何","网络","发生","可","自然"," ","提取","如","/","ga","学习","商业","两","收敛","适应","、","最佳","算法","不必要","又","pypi","机制","比如","某个","最优","统称","变异","一篇","）","选取","分析","都","表示","https","成分","packages","会","直至","最优化","非常","不断","进行","这一","机器","大用处","基于","自然选择","复杂","高维","简介","这里","分类","主要","有","机体","搜索","解决","时有发生","。"],"title":"维度灾难特征选取遗传算法","title_tokens":["灾难","算法","维度","选取","遗传算法","特征","遗传"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE-%E7%89%B9%E5%BE%81%E9%80%89%E5%8F%96/","text":"特征选取 特征选取是从你的数据集中过滤掉不相关或冗余的特征。特征选取与特征提取的关键区别在于：特征选取是从原特征集中选取一个子特征集，而特称提取则是在原特征集的基础上重新构造出一些(一个或多个)全新的特征。 需要注意的是，某些监督式机器学习算法已经具备了内在的特征选取机制：比如正则回归与随机森林。通常，我们是建议一开始优先尝试这些算法，如果它们能匹配上你的问题的话。对此我们已经做过介绍。 作为独立的任务，特征选取既可以是非监督式的(如方差阈值)，又可以是监督式的(比遗传算法)。有必要的话，你还可以把多种方法以某种合理的方式整合在一起。","text_tokens":["集","把","作为","做过","阈值","必要","掉","一个","子","全新","任务","监督","以","或","如果","遗传","方法","优先","这些","合理","你","特征提取","森林","而",")","能","上","整合","则","不","：","特征","具备","基础","区别","是","开始","它们","特称","在于","的话","可以","与","了","既","某些","构造","的","重新","遗传算法","关键","我们","相关","原","，","某种","随机","(","在","多个","通常","问题","数据","独立","一起","需要","式","一些","回归","方式","是从","如"," ","提取","是非","还","学习","注意","冗余","对此","算法","集中","又","内在","机制","比如","比","多种","选取","匹配","过滤","介绍","机器","出","方差","已经","建议","有","正则","尝试","一","。"],"title":"维度灾难特征选取","title_tokens":["选取","灾难","维度","特征"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/","text":"在机器学习领域，“维度(Dimensionality)”通常指数据集中的特征数量（即输入变量的个数）。 当特征的个数特别大的时候（相对于数据集中观测样本的数量来说），训练出一个有效的模型，对算法要求就会特别高(即，用现有的算法训练出一个有效的模型特别困难)。这就是所谓的“维度灾难(Curse of Dimensionality)”，特别是对依赖于距离计算的聚类算法而言。 对于“维度灾难”，有位 Quora 用户给出了一个非常好的类比： 假设有一条100码的直线，而你在该直线的某处掉了一枚硬币。要找回硬币并不难，你只需沿着这条线走就行了，最多花上你2分钟时间。 ​ 然后，假设有一个长和宽都是100码的广场，而你是把硬币掉在广场的某个位置。现在再想找回它，可就不容易了，这好比在两个并排的足球场中找针，可能会耗上你几天时间。 ​ 再然后，假设是一个长、宽、高都是100码的立方体，那就好比是在30层楼高的大型体育场内找zhen找针…… ​ 随着维度的增加，在空间中搜索的难度也会变得愈加困难。 Quora链接： https://www.quora.com/What-is-the-curse-of-dimensionality/answer/Kevin-Lacker 这就需要数据降维的办法： 特征选取和特征提取。 “机器学习中的数据维数与现实世界的空间维度本同末离。在机器学习中，数据通常需要被表示成向量形式以输入模型进行训练。但众所周知，对向维向量进行处理和分析时，会极大地消耗系统资源，甚至产生维度灾难。因此，进行降维，即用一个低维度的向量表示原始高维度的特征就显得尤为重要。常见的降维方法有主成分分析、线性判别分析、等距映射、局部线性嵌入、拉普拉斯特征映射、局部保留投影等。”","text_tokens":["对于","立方","大","把","”","用","变得","赖于","系统","走","掉","一个","长","（","被","dimensionality","尤为重要","“","现有","硬币","of","找针","产生","给出","模型","个数","不难","然后","com","以","方法","层楼","而言","因此","你","聚类",":","办法","特征提取","而",")","想","宽","the","原始","映射","30","降维","上","但","该","拉普拉斯","样本","等","好","不","一条","类比","拉普",".","码","：","要","特征","立方体","即","当","就是","是","足球","局部","沿着","一枚","嵌入","困难","依赖","大型","并","与","了","处理","内","中","的","两个","找","那","这条","…","领域","变量","本同末离","甚至","对","位置","quora","成","体育场","普拉斯","可能","难度","，","时间","尤为","为重","维度","就行了","假设","系统资源","足球场","高","(","在","通常","有效","kevin","于","answer","2","就","保留","好比","也","空间","要求","地","时候","数据","距离","输入","is","需要","即用","​","有主","来说","体育","-","资源","和","现在","对向维","curse","常见","计算","显得","重要","愈加","最多","所谓","可","时","相对","几天"," ","/","提取","学习","特别","最多花","灾难","观测","指","用户","直线","这条线","算法","集中","、","增加","随着","判别分析","100","某个","并排","zhen","只","what","）","这","选取","极大","它","分析","线性","都","表示","现实","https","成分","需","会","球场","再","www","世界","判别","非常","众所周知","某处","广场","容易","依赖于","进行","有位","消耗","低","找回","形式","机器","lacker","普拉","分钟","会耗","投影","向量","出","周知","等距","链接","维数","拉斯","有","数量","训练","搜索","。"],"title":"维度灾难","title_tokens":["灾难","维度"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-DBSCAN/","text":"DBSCAN DBSCAN 是一种基于密度的聚类算法，它将样本点的密集区域组成集群；其最新进展是HDBSCAN，它允许集群的密度可变。 优点 ：DBSCAN 不需要假定类球形集群，其性能可以扩展。此外，它不需要每个点都被分配到集群中，这就降低了集群的噪音。 缺点 ：用户必须要调整“epsilon”和“min_sample”这两个超参数来定义集群密度。DBSCAN 对此非常敏感。 实现 ： Python - http://scikit-learn.org/stable/modules/clustering.html#dbscan R - https://cran.r-project.org/web/packages/dbscan/index.html w:【无监督学习】DBSCAN聚类算法原理介绍，以及代码实现","text_tokens":["类","”","w","stable","min","被","“","代码","将","hdbscan","监督","允许","org","http","到","聚类",":","无","每个","#","dbscan","分配","最新进展","cran","样本","不","modules","以及",".","：","必须","要","python","r","epsilon","是","index","进展","可以","html","】","了","scikit","中","的","原理","两个","点","性能","区域","project","web","噪音","密集","，","实现","敏感","learn","球形","密度","集群","新进展","缺点","假定","clustering","优点","就","其","需要","组成","-","此外","扩展","和"," ","/","学习","可变","sample","降低","参数","用户","对此","算法","最新","定义","；","这","它","都","https","packages","非常","一种","超","介绍","来","基于","调整","_","【","。"],"title":"聚类DBSCAN","title_tokens":["聚类","dbscan"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-DBSCAN/#wdbscan","text":"","text_tokens":[],"title":"w:【无监督学习】DBSCAN聚类算法原理介绍，以及代码实现","title_tokens":["介绍","【","dbscan","以及","，","】","算法","代码","实现","监督","w","聚类",":","无","学习","原理"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-EM%E7%AE%97%E6%B3%95/","text":"“K均值算法的收敛性。” EM算法是基于模型的聚类方法，是在概率模型中寻找参数最大似然估计的算法，其中概率模型依赖于无法观测的隐藏变量。E步估计隐含变量，M步估计其他参数，交替将极值推向最大。 EM算法比K-means算法计算复杂，收敛也较慢，不适于大规模数据集和高维数据，但比K-means算法计算结果稳定、准确。EM经常用在机器学习和计算机视觉的数据集聚（Data Clustering）领域。 特点： E:给定参数与观测数据下对未观测数据的条件概率分布的期望 M：求使条件概率分布期望最大下的参数值 优点： 比K-means稳定、准确 缺点： 计算复杂且收敛慢，依赖于初始参数假设","text_tokens":["集","下","”","用","估计","算机","赖于","data","概率模型","概率","（","“","将","模型","大规","经常","em","未","方法","聚类","均值",":","means","稳定","e","但","计算结果","m","慢","不","求使","且","给定","：","其他","最大","其中","是","较慢","特点","依赖","条件","与","收敛性","分布","中","的","期望","数值","隐含","领域","变量","对","隐藏","，","似然","假设","缺点","在","clustering","适于","优点","也","推向","数据","-","和","集聚","计算","结果"," ","学习","收敛","参数","观测","、","算法","视觉","参数值","k","步","比","计算机","）","无法","初始","大规模","概率分布","准确","依赖于","极值","机器","基于","复杂","高维","交替","寻找","规模","。"],"title":"聚类EM算法","title_tokens":["算法","聚类","em"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-GMM-EM/","text":"“高斯混合模型（Gaussian Mixed Model，GMM）也是一种常见的聚类算法，与K均值算法类似，同样使用了EM算法进行迭代计算。高斯混合模型假设每个簇的数据都是符合高斯分布（又叫正态分布）的，当前数据呈现的分布就是各个簇的高斯分布叠加在一起的结果。 图5.6是一个数据分布的样例，如果只用一个高斯分布来拟合图中的数据，图中所示的椭圆即为高斯分布的二倍标准差所对应的椭圆。直观来说，图中的数据明显分为两簇，因此只用一个高斯分布来拟和是不太合理的，需要推广到用多个高斯分布的叠加来对数据进行拟合。图5.7是用两个高斯分布的叠加来拟合得到的结果。这就引出了高斯混合模型，即用多个高斯分布函数的线形组合来对数据分布进行拟合。理论上，高斯混合模型可以拟合出任意类型的分布。” “高斯混合模型的核心思想是什么？它是如何迭代计算的？” “说起高斯分布，大家都不陌生，通常身高、分数等都大致符合高斯分布。因此，当我们研究各类数据时，假设同一类的数据符合高斯分布，也是很简单自然的假设；当数据事实上有多个类，或者我们希望将数据划分为一些簇时，可以假设不同簇中的样本各自服从不同的高斯分布，由此得到的聚类算法称为高斯混合模型。 高斯混合模型的核心思想是，假设数据可以看作从多个高斯分布中生成出来的。在该假设下，每个单独的分模型都是标准高斯模型，其均值$μi$和方差$Σi$是待估计的参数。此外，每个分模型都还有一个参数$πi$，可以理解为权重或生成数据的概率。高斯混合模型的公式为” “高斯混合模型是一个生成式模型。可以这样理解数据的生成过程，假设一个最简单的情况，即只有两个一维标准高斯分布的分模型N(0,1)和N(5,1)，其权重分别为0.7和0.3。那么，在生成第一个数据点时，先按照权重的比例，随机选择一个分布，比如选择第一个高斯分布，接着从N(0,1)中生成一个点，如−0.5，便是第一个数据点。在生成第二个数据点时，随机选择到第二个高斯分布N(5,1)，生成了第二个点4.7。如此循环执行，便生成出了所有的数据点。 然而，通常我们并不能直接得到高斯混合模型的参数，而是观察到了一系列数据点，给出一个类别的数量K后，希望求得最佳的K个高斯分模型。因此，高斯混合模型的计算，便成了最佳的均值μ，方差Σ、权重π的寻找，这类问题通常通过最大似然估计来求解。遗憾的是，此问题中直接“直接使用最大似然估计，得到的是一个复杂的非凸函数，目标函数是和的对数，难以展开和对其求偏导。” “在这种情况下，可以用上一节已经介绍过的EM算法框架来求解该优化问题。EM算法是在最大化目标函数时，先固定一个变量使整体函数变为凸优化函数，求导得到最值，然后利用最优参数更新被固定的变量，进入下一个循环。具体到高斯混合模型的求解，EM算法的迭代过程如下。 ” “首先，初始随机选择各参数的值。然后，重复下述两步，直到收敛。 （1）E步骤。根据当前的参数，计算每个点由某个分模型生成的概率。 （2）M步骤。使用E步骤估计出的概率，来改进每个分模型的均值，方差和权重。 也就是说，我们并不知道最佳的K个高斯分布的各自3个参数，也不知道每个数据点究竟是哪个高斯分布生成的。所以每次循环时，先固定当前的高斯分布不变，获得每个数据点由各个高斯分布生成的概率。然后固定该生成概率不变，根据数据点和生成概率，获得一个组更佳的高斯分布。循环往复，直到参数的不再变化，或者变化非常小时，便得到了比较合理的一组高斯分布。","text_tokens":["选择","一个","被","数据分布","或","便","如果","分别","到","比较","简单","不同","大家","生成式","样本","等","观察","理论","当","个","改进","函数","高斯分布","5","标准差","的","两个","一系列","然而","不能","凸函数","小时","第一个","同","第一","最大化","假设","情况","随机","究竟","在","核心","任意","说起","一个点","得到","问题","i","直观","也","一类","往复","？","研究","组合","此外","结果","类似","变化"," ","图中","太","常见","又","比如","遗憾","非","服从","分为","它","希望","μ","循环","哪个","介绍","比例","每次","理解","线形","方差","一系","有","二倍","什么","用","簇中","概率","mixed","两步","称为","“","模型","首先","一个组","叫","公式","重复","就是说","合理","均值","循环往复","明显","进入","这种","gmm","5.6","整体","标准","分","可以","并","与","了","很","如此","各个","中","5.7","使用","先","一维","变量","我们","叠加","(","通常","不知","4.7","身高","框架","3","0.5","其","来说","事实","一节","如","参数","直接","最佳","划分","；","）","都","各类","各自","具体","非常","由此","引出","所有","出","所","已经","不再","数量","。","下","类","”","根据","目标","只用","也就是说","簇","呈现","接着","（","便是","优化","然后","em","那么","样例","聚类","核心思想","还有","椭圆","来拟","每个","为","而是","上","难以","model","簇时","看作","待","更新","最大","是","两簇","如下","求得","求导","正态分布","点","便成","，","这样","似然",",","偏导","获得","并不知道","使","展开","多个","2","就","如何","第二个","知道","即用","数据","需要","拟合","计算","类别","收敛","不变","符合","单独","k","某个","最优","所示","0.7","陌生","$","这","后","高斯","来","对数","复杂","下述","或者","心思","估计","σ","将","给出","因此","二个","推广",")","1","思想","e","该","步骤","大化","m","不","混合","分数","直到","类型","大致","即","就是","权重","0.3","−","变为","利用","最值","分布","一组","对","固定","最","更佳","所以","通过","第二","生成","一起","由","图","和","一些","值","事实上","迭代","同样","0","时","自然","此","、","算法","n","π","点时","过","凸","当前","各","按照","只有","初始","gaussian","一种","进行","从","系列","过程","执行","寻找","出来","对应","其求","求解"],"title":"聚类 GMM EM","title_tokens":["聚类"," ","em","gmm"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-GMM-Kmeans/","text":"高斯混合模型与K均值算法的相同点是，它们都是可用于聚类的算法；都需要指定K值；都是使用EM算法来求解；都往往只能收敛于局部最优“。而它相比于K均值算法的优点是，可以给出一个样本属于某类的概率是多少；不仅仅可以用于聚类，还可以用于概率密度的估计；并且可以用于生成新的样本点。”","text_tokens":["混合","收敛","，","算法","”","概率密度","估计","不仅仅","用于","k","多少","概率","最优","一个","密度","；","相比","“","于","属于","给出","模型","不仅","是","它们","优点","它","局部","都","指定","em","生成","可以","与","需要","相同点","聚类","均值","高斯","来","往往","使用","同点","的","值","而","相同","可","某类","点","只能","仅仅","还","样本","新","。","求解","并且"],"title":"聚类GMMKmeans","title_tokens":["聚类","gmmkmeans"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-Isodata/","text":"“当K值的大小不确定时，可以使用ISODATA算法。ISODATA的全称是迭代自组织数据分析法。在K均值算法中，聚类个数K的值需要预先人为地确定，并且在整个算法过程中无法更改。而当遇到高维度、海量的数据集时，人们往往很难准确地估计出K的大小。ISODATA算法就是针对这个问题进行了改进，它的思想也很直观。当属于某个类别的样本数过少时，把该类别去除；当属于某个类别的样本数过多、分散程度较大时，把该类别分为两个子类别。ISODATA算法在K均值算法的基础之上增加了两个操作，一是分裂操作，对应着增加聚类中心数；二是合并操作，对应着减少聚类中心数。ISODATA算法是一个比较常见的算法，其缺点是需要指定的参数比较多，不仅仅需要一个参考的聚类数量Ko，还需要制定3个阈值。下面介绍ISODATA算法的各个输入参数。” “（1）预期的聚类中心数目$Ko$。在ISODATA运行过程中聚类中心数可以变化，$Ko$是一个用户指定的参考值，该算法的聚类中心数目变动范围也由其决定。具体地，最终输出的聚类中心数目常见范围是从Ko的一半，到两倍Ko。 （2）每个类所要求的最少样本数目Nmin。如果分裂后会导致某个子类别所包含样本数目小于该阈值，就不会对该类别进行分裂操作。 （3）最大方差Sigma。用于控制某个类别中样本的分散程度。当样本的分散程度超过这个阈值时，且分裂后满足（1），进行分裂操作。” “（4）两个聚类中心之间所允许最小距离Dmin。如果两个类靠得非常近（即这两个类别对应聚类中心之间的距离非常小），小于该阈值时，则对这两个类进行合并操作。 如果希望样本不划分到单一的类中，可以使用模糊C均值或者高斯混合模型，高斯混合模型会在下一节中详细讲述。”","text_tokens":["数","isodata","把","”","中心","一半","估计","类","下面","下","阈值","多","一个","（","子","“","参考值","类靠","模型","个数","人为","包含","较大","允许","如果","小于","到","大小","聚类","均值","比较","范围","每个","而","海量","最少","1","思想","该","仅仅","样本","则","并且","不","混合","一是","且","之间","之上","中聚类","用于","更改","讲述","最终","模糊","减少","基础","小","最大","即","当","少时","个","就是","着","整个","合并","是","改进","4","dmin","程度","参考","可以","了","各个","中","使用","的","近","两个","很难","ko","对","c","运行","，","制定","维度","人们","高","最小","去除","缺点","在","分裂","组织","不仅","2","3","确定","预期","问题","就","直观","二是","也","数目","地","要求","其","数据","距离","输入","需要","操作","由","本数","一节","值","迭代","变化","是从","时","遇到","类别"," ","还","变动","过多","常见","参数","用户","、","增加","算法","决定","分散","sigma","不仅仅","划分","k","过","某个","自","数据分析","两倍","；","不会","$","预先","超过","属于","）","这","nmin","分为","它","分析","无法","集时","输出","指定","后","希望","单一","详细","这个","具体","会","非常","准确","进行","满足","介绍","高斯","往往","导致","出","方差","控制","所","样本数","过程","数量","全称","针对","对应","很","得","。","法","或者"],"title":"聚类Isodata","title_tokens":["聚类","isodata"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-SOM-kmeans/","text":"“自组织映射神经网络与K均值算法的区别如下。 （1）K均值算法需要事先定下类的个数，也就是K的值。而自组织映射神经网络则不用，隐藏层中的某些节点可以没有任何输入数据属于它，因此聚类结果的实际簇数可能会小于神经元的个数。而K均值算法受K值设定的影响要更大一些。 （2）K均值算法为每个输入数据找到一个最相似的类后，只更新这个类的参数；自组织映射神经网络则会更新临近的节点。所以，K均值算法受noise data的影响比较大，而自组织映射神经网络的准确性可能会比K均值算法低（因为也更新了临近节点）。 （3）相比较而言，自组织映射神经网络的可视化比较好，而且具有优雅的拓扑关系图。”","text_tokens":["可视","大","类","”","data","拓扑","神经网络","一个","临近","（","“","因为","个数","而言","因此","小于","聚类","均值","节点","找到","比较","每个","而","为","1","映射","准确性","则","好","受","要","更","神经","没有","而且","更新","优雅","区别","具有","事先","就是","实际","如下","可以","与","了","可视化","某些","关系","的","神经网","定下","隐藏","可能","相似","神经元","，","最","所以","组织","影响","2","3","noise","也","数据","输入","需要","图","不用","一些","结果","层中","值","任何","网络"," ","参数","算法","k","比","自","只","；","属于","）","后","它","这个","会","设定","低","准确","簇数","相","比较而言","。"],"title":"聚类SOMkmeans","title_tokens":["聚类","somkmeans"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-SOM/","text":"“自组织映射神经网络（Self-Organizing Map，SOM）是无监督学习方法中一类重要方法，可以用作聚类、高维可视化、数据压缩、特征提取等多种用途。在深度神经网络大为流行的今天，谈及自组织映射神经网络依然是一件非常有意义的事情，这主要是由于自组织映射神经网络融入了大量人脑神经元的信号处理机制，有着独特的结构特点。该模型由芬兰赫尔辛基大学教授Teuvo Kohonen于1981年提出，因此也被称为Kohonen网络。” “自组织映射神经网络本质上是一个两层的神经网络，包含输入层和输出层” “输入层模拟感知外界输入信息的视网膜，输出层模拟做出响应的大脑皮层。输出层中神经元的个数通常是聚类的个数，代表每一个需要聚成的类。训练时采用“竞争学习”的方式，每个输入的样例在输出层中找到一个和它最匹配的节点，称为激活节点，也叫winning neuron；紧接着用随机梯度下降法更新激活节点的参数；同时，和激活节点临近的点也根据它们距离激活节点的远近而适当地更新参数。这种竞争可以通过神经元之间的横向抑制连接（负反馈路径）来实现。自组织映射神经网络的输出层节点是有拓扑关系的。这个拓扑关系依据需求确定，如果想要一维的模型，那么隐藏节点可以是“一维线阵”；如果想要二维的拓扑关系，那么就行成一个“二维平面阵”，如图5.8所示。也有更高维度的拓扑关系的，比如“三维栅格阵”，但并不常见。” “怎样设计自组织映射神经网络并设定网络训练参数？ ”","text_tokens":["可视","类","”","用","5.8","根据","拓扑","神经网络","一个","响应","接着","（","临近","被","称为","“","流行","压缩","监督","模型","包含","个数","线阵","大量","叫","如果","方法","赫尔辛基大学","因此","下降","那么","样例","信息","聚类","反馈","特征提取","无","找到","节点","行成","每个","而","映射","上","但","该","等","不","map","之间","平面","层","依据","路径","意义","采用","需求","这种","特征","事情","更","神经","芬兰","更新","独特","网膜","som","教授","数据压缩","是","它们","kohonen","特点","可以","辛基","并","依然","了","可视化","处理","适当","关系","中","的","由于","结构","做出","神经网","一维","信号处理","紧接着","谈及","感知","点","连接","隐藏","远近","视网","融入","神经元","今天","，","同时","实现","维度","提出","最","高","随机","负反馈","在","通常","组织","于","年","通过","大为","本质","竞争","确定","就","外界","抑制","阵","也","一类","用途","neuron","信号","地","距离","数据","一件","输入","需要","？","-","由","self","teuvo","每","和","winning","紧接","深度","层中","重要","方式","二维","想要","栅格","皮层","网络","时"," ","提取","聚成","大学","横向","学习","平面阵","激活","用作","参数","常见","、","梯度","机制","比如","自","所示","；","如图","多种","）","这","设计","输出","它","法","三维","1981","大脑","这个","怎样","模拟","非常","匹配","设定","大脑皮层","人脑","有着","来","高维","赫尔辛","主要","两层","有","训练","organizing","视网膜","。","代表","赫尔"],"title":"聚类SOM","title_tokens":["聚类","som"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-kmeans%2B%2B/","text":"“K均值算法的主要缺点如下。 （1）需要人工预先确定初始K值，且该值和真实的数据分布未必吻合。 （2）K均值只能收敛到局部最优，效果受到初始值很大。 （3）易受到噪点的影响。 （4）样本点只能被划分到单一的类中。 ■ K-means++算法 因为 k-means++ 要解决k-means受初始化值影响大这个问题，因此 k-means++ 算法中，最关键的一步就是 初始 点的选取应该足够的离散 K均值的改进算法中，对初始值选择的改进是很重要的一部分。而这类算法中，最具影响力的当属K-means++算法。原始K均值算法最开始随机选取数据集中K个点作为聚类中心，而K-means++按照如下的思想选取K个聚类中心。假设已经选取了n个初始聚类中心（0<n<K），则在选取第n+1个聚类中心时，距离当前n个聚“类中心越远的点会有更高的概率被选为第n+1个聚类中心。在选取第一个聚类中心（n=1）时同样通过随机的方法。可以说这也符合我们的直觉，聚类中心当然是互相离得越远越好。当选择完初始点后，K-means++后续的执行和经典K均值算法相同，这也是对初始值选择进行改进的方法等共同点。”","text_tokens":["大","类","”","中心","作为","选择","未必","这类","概率","一个","（","越远","被","“","+","因为","直觉","数据分布","受到","易","人工","++","吻合","方法","因此","到","<","聚类","均值","而","1","means","原始","思想","相同","选为","样本","等","则","好","一部分","噪点","且","真实","第","受","说","要","更","点会","完","当","个","就是","个点","是","改进","开始","经典","4","局部","如下","应该","可以","一部","了","分布","中","的","离得","预先确定","点","对","第一个","关键","第一","我们","离散","，","■","假设","高","很大","最","随机","越","缺点","在","被选为","后续","部分","互相","当属","2","3","确定","影响","通过","问题","也","距离","数据","需要","共同点","足够","-","和","同点","值","该值","重要","同样","0","时"," ","聚","收敛","一步","算法","集中","n","符合","划分","k","初始值","最优","当然","当前","效果","预先","初始化","）","这","选取","最具","按照","点后","初始","单一","这个","影响力","进行","已经","主要","有","=","执行","只能","很","解决","共同","。"],"title":"聚类kmeans++","title_tokens":["聚类","++","kmeans"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-k%E5%9D%87%E5%80%BC/","text":"K 均值 K 均值是基于样本点间的几何距离来度量聚类的通用目的算法。由于集群围绕在聚类中心，结果会接近于球状并具有相似的大小。 我们之所以推荐该算法给初学者，是因为它不仅足够简单，而且足够灵活，对于大多数问题都能给出合理的结果。 是一个简单的聚类算法，把n的对象根据他们的属性分为k个分割，k< n。算法的核心就是要优化失真函数J,使其收敛到局部最小值但不是全局最小值。 “它的基本思想是，通过迭代方式寻找K个簇（Cluster）的一种划分方案，使得聚类结果对应的代价函数最小。特别地，代价函数可以定义为各个样本距离所属簇中心点的误差平方和” 关于K-Means聚类的文章，参见机器学习算法-K-means聚类。关于K-Means的推导，里面可是有大学问的，蕴含着强大的EM思想。 优点 ： K 均值是最为流行的聚类算法，因为它足够快速、足够简单，如果你的预处理数据和特征工程都做得十分有效，那它将具备令人惊叹的灵活性。 算法简单，容易实现 ； 算法速度很快； 对处理大数据集，该算法是相对可伸缩的和高效率的，因为它的复杂度大约是O(nkt)，其中n是所有对象的数目，k是簇的数目,t是迭代的次数。通常k<<n。这个算法通常局部收敛。“但一般情况下达到的局部最优已经可以满足聚类的需求。” 算法尝试找出使平方误差函数值最小的k个划分。当簇是密集的、球状或团状的，且簇与簇之间区别明显时，聚类效果较好。 缺点 ： 该算法需要指定集群的数量，而 K 值的选择通常都不是那么容易确定的。另外，如果训练数据中的真实集群并不是类球状的，那么 K 均值聚类会得出一些比较差的集群。 对数据类型要求较高，适合数值型数据； 可能收敛到局部最小值，在大规模数据上收敛较慢 分组的数目k是一个输入参数，不合适的k可能返回较差的结果。 对初值的簇心值敏感，对于不同的初始值，可能会导致不同的聚类结果； 不适合于发现非凸面形状的簇，或者大小差别很大的簇。 对于”噪声”和孤立点数据敏感，少量的该类数据能够对平均值产生极大影响。 “受初值和离群点的影响每次的结果不稳定、 结果通常不是全局最优而是局部最优解、 无法很好地解决数据簇分布差别比较大的情况（比如一类是另一类样本数量的100倍）、 不太适用于离散分类等” “样本点只能被划分到单一的类中。” 实现 ： Python - http://scikit-learn.org/stable/modules/clustering.html#k-means R - https://stat.ethz.ch/R-manual/R-devel/library/stats/html/kmeans.html 调优 “（1）数据归一化和离群点处理。 K均值聚类本质上是一种基于欧式距离度量的数据划分方法，均值和方差大的维度将对数据的聚类结果产生决定性的影响，所以未做归一化处理和统一单位的数据是无法直接参与运算和比较的。同时，离群点或者少量的噪声数据就会对均值产生较大的影响，导致中心偏移，因此使用K均值聚类算法之前通常需要对数据做预处理。 （2）合理选择K值。 K值的选择是K均值聚类最大的问题之一，这也是K均值聚类算法的主要缺点。实际上，我们希望能够找到一些可行的办法来弥补这一缺点，或者说找到K值的合理估计方法。但是，K值的选择一般基于经验和多次实验结果。例如采用手肘法，我们可以尝试不同的K值，并将不同K值所对应的损失函数画成折线，横轴为K“的取值，纵轴为误差平方和所定义的损失函数，如图5.3所示。 “（3）采用核函数。” 采用核函数是另一种可以尝试的改进方向。传统的欧式距离度量方式，使得K均值算法本质上假设了各个数据簇的数据具有一样的先验概率，并呈现球形或者高”“维球形分布，这种分布在实际生活中并不常见。面对非凸的数据分布形状时，可能需要引入核函数来优化，这时算法又称为核K均值算法，是核聚类方法的一种[6]。核聚类方法的主要思想是通过一个非线性映射，将输入空间中的数据点映射到高位的特征空间中，并在新的特征空间中进行聚类。非线性映射增加了数据点线性可分的概率，从而在经典的聚类算法失效的情况下，通过引入核函数可以达到更为准确的聚类结果。”","text_tokens":["多数","关于","把","误差","选择","stable","一个","被","因为","数据分布","推荐","或","可行","如果","方法","到","比较","而","能","简单","不同","映射","]","一般","样本","等","modules","噪声","真实","需求","定性","6","学者","其中","区别","个","推导","返回","改进","实际","函数","经验","簇心值","取值","的","由于","少量","几何","分割","引入","维度","假设","情况","形状","方向","在","核心","stats","于","不仅","本质","问题","也","一类","地","围绕","-","之所以","结果"," ","/","常见","不是","一样","又","灵活","较差","代价","比如","100","非","效果","如图","[","分为","它","极大","希望","或者说","很快","线性","通用","该类","准确","决定性","机器","每次","o","方差","有","尝试","只能","法","对象","中心","纵轴","大约","概率","nkt","称为","“","能够","发现","非凸","初值","高位","kmeans","属性","维","合理","大多数","均值","ethz","办法","灵活性","得出","手肘","但","明显","惊叹","且","之间","之前","大多","：","受","这种","具备","具有","适合","里面","令人","局部","可以","并","初学者","与","这时","了","工程","5.3","各个","stat","中","使用","合适","当簇","使得","我们","可能","参与","先验概率","另一类","最小","球形","(","有效","通常","3","空间","平均","要求","其","方案","实际上","速度","方式","j","适用","可","令人惊叹","大学","学习","直接参与","参数","决定","直接","生活","划分","cluster","定义","；","核","）","都","指定","单一","初学","多次","所有","导致","弥补","已经","所","数量","训练","次数","规模","。","最为","对于","问","devel","集","下","类","”","面对","根据","十分","例如","簇","呈现","横轴","t","（","损失","优化","em","参见","预处理","http","那么","归一化","大小","<","你","聚类",":","为","而是","means","可是","折线","上","平方和","新","好","之一",".","平方","要","python","r","最大","解","凸面","蕴含","是","较慢","经典","达到","scikit","处理","欧式","失效","是因为","局部收敛","那","复杂度","ch","蕴含着","中心点","点","倍","密集","相似","强大","离散","，","实现","同时",",","高","learn","使","clustering","2","就","高效率","数目","距离","数据","传统","需要","足够","单位","实验","好地解决","收敛","k","初始值","最优","所示","得","这","偏移","大规模","https","这个","会","团状","运算","满足","这一","来","另外","复杂","最小值","先验","manual","球状","或者","大","估计","平均值","核聚类","将","产生","流行","给出","大规","画成","较大","未","org","因此","点间","找到","分组",")","#","1","思想","稳定","该","调优","不","较","活性","类型","接近","快速","采用","特征","可分","找出","而且","就是","html","给","另","非线性","分布","数值","型","对","高效","伸缩","从而","基本","很大","敏感","孤立","做","所以","集群","文章","缺点","影响","通过","优点","确定","输入","全局","和","一些","值","迭代","失真","时","相对","差别","但是","特别","library","、","增加","度量","算法","n","离群","目的","差","无法","不太","初始","数据类型","容易","一种","进行","效率","基于","统一","更为","所属","分类","主要","寻找","他们","很","解决","对应"],"title":"聚类k均值","title_tokens":["k","聚类","均值"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-%E5%88%86%E5%B1%82%E5%B1%82%E6%AC%A1/","text":"分层 / 层次 分层聚类，又名层次聚类，其算法基于以下概念来实现： 1) 每一个集群都从一个数据点开始； 2) 每一个集群都可基于相同的标准进行合并； 3) 重复这一过程，直至你仅剩下一个集群，这就获得了集群的层次结构。 ddddddfjdiajfoa 优点 ：层次聚类的最主要优点，是集群不再假定为类球形。此外，它可以很容易扩展到大数据集。 缺点 ：类似于 K 均值，该算法需要选定集群的数量，即算法完成后所要保留的层次。 实现 ： Python - http://scikitlearn.org/stable/modules/clustering.html#hierarchical-clustering R - https://stat.ethz.ch/R-manual/R-devel/library/stats/html/hclust.html","text_tokens":["devel","集","大","stable","一个","org","重复","http","到","你","聚类","均值","ethz",":",")","#","1","相同","该","完成","hclust","modules","仅","层次结构",".","以下","：","分层","python","r","为类","概念","即","合并","开始","是","标准","可以","html","了","stat","层次","的","结构","ch","点","剩下","又名","，","实现","获得","scikitlearn","最","球形","缺点","集群","stats","于","假定","clustering","2","3","优点","就","保留","其","数据","需要","-","此外","扩展","每","类似","可"," ","/","hierarchical","library","算法","k","；","ddddddfjdiajfoa","这","选定","后","它","都","https","直至","容易","进行","这一","来","基于","manual","从","不再","过程","主要","所要","数量","很","。"],"title":"聚类分层层次","title_tokens":["聚类","分层","层次"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB-%E6%94%BE%E5%B0%84%E4%BC%A0%E6%92%AD/","text":"仿射传播 仿射传播是一种相对较新的聚类算法，它基于两个样本点之间的图形距离来确定集群，其结果倾向于更小且大小不等的集群。 优点 ：仿射传播不需要指出明确的集群数量，但需要指定“sample preference”和“damping”等超参数。 缺点 ：仿射传播的主要缺点是训练速度较慢，且需要大量内存，因而难于扩展到大数据集。此外，该算法同样在假定潜在的集群要接近于球状。 实现 ： Python - http://scikit-learn.org/stable/modules/clustering.html#affinity-propagation R - https://cran.r-project.org/web/packages/apcluster/index.html","text_tokens":["集","大","”","stable","倾向","damping","“","大量","小且","org","http","到","大小","聚类",":","#","潜在","但","该","新","cran","样本","等","难于","不","modules","较","之间","且",".","接近","：","要","更","python","r","内存","是","较慢","index","html","scikit","的","两个","点","project","web","因而","图形","，","实现","learn","缺点","集群","在","明确","于","假定","clustering","确定","优点","大小不等","距离","其","数据","需要","apcluster","-","此外","扩展","和","速度","结果","同样","相对"," ","/","sample","参数","算法","propagation","传播","它","指定","preference","https","packages","指出","仿射","一种","超","affinity","来","基于","不等","主要","数量","训练","球状","。"],"title":"聚类放射传播","title_tokens":["传播","聚类","放射"]},{"location":"ml-%E6%97%A0%E7%9B%91%E7%9D%A3/%E8%81%9A%E7%B1%BB/%E8%81%9A%E7%B1%BB/","text":"聚类是基于数据内部结构来寻找样本自然族群（集群）的无监督学习任务，使用案例包括用户画像、电商物品聚类、社交网络分析等。 由于聚类属于无监督学习，也就不会输出“正确的答案”，评价结果时往往要用到数据可视化。如果你需要“正确的答案”，亦即训练集中存在预标注的集群，那么用分类算法会更加合适。 聚类算法是指对一组目标进行分类，属于同一组（亦即一个类，cluster）的目标被划分在一组中，与其他组目标相比，同一组目标更加彼此相似（在某种意义上）。 例子： K-均值（k-Means） k-Medians 算法 Expectation Maximi 封层 ation (EM) 最大期望算法（EM） 分层集群（Hierarchical Clstering） 优点： 让数据变得有意义 缺点： 结果难以解读，针对不寻常的数据组，结果可能无用。","text_tokens":["可视","类","”","用","变得","目标","电商","一个","（","被","画像","“","任务","监督","存在","em","如果","亦","评价","那么","你","聚类","均值","无","更加",")","means","上","难以","样本","等","不","组","：","意义","其他","要","分层","即","最大","相比","标注","寻常","是","彼此","与","可视化","物品","中","使用","一组","的","期望","网络分析","由于","结构","合适","对","clstering","封层","同","相似","可能","，","某种","预","medians","expectation","缺点","集群","在","(","内部","优点","就","也","数据","例子","需要","-","结果","包括","内部结构","网络","用到","时","解读","自然"," ","hierarchical","学习","指","用户","、","算法","集中","划分","某种意义","k","cluster","无用","案例","族群","不会","属于","）","输出","分析","答案","ation","会","社交","正确","进行","来","往往","基于","分类","maximi","寻找","有","训练","让","针对","。"],"title":"聚类","title_tokens":["聚类"]},{"location":"%E5%8C%97%E4%BA%AC/%E7%BB%B4%E5%BA%A6%E7%81%BE%E9%9A%BE/","text":"在机器学习领域，“维度(Dimensionality)”通常指数据集中的特征数量（即输入变量的个数）。 当特征的个数特别大的时候（相对于数据集中观测样本的数量来说），训练出一个有效的模型，对算法要求就会特别高(即，用现有的算法训练出一个有效的模型特别困难)。这就是所谓的“维度灾难(Curse of Dimensionality)”，特别是对依赖于距离计算的聚类算法而言。 对于“维度灾难”，有位 Quora 用户给出了一个非常好的类比： 假设有一条100码的直线，而你在该直线的某处掉了一枚硬币。要找回硬币并不难，你只需沿着这条线走就行了，最多花上你2分钟时间。 ​ 然后，假设有一个长和宽都是100码的广场，而你是把硬币掉在广场的某个位置。现在再想找回它，可就不容易了，这好比在两个并排的足球场中找针，可能会耗上你几天时间。 ​ 再然后，假设是一个长、宽、高都是100码的立方体，那就好比是在30层楼高的大型体育场内找zhen找针…… ​ 随着维度的增加，在空间中搜索的难度也会变得愈加困难。 Quora链接： https://www.quora.com/What-is-the-curse-of-dimensionality/answer/Kevin-Lacker 这就需要数据降维的办法： 特征选取和特征提取。 “机器学习中的数据维数与现实世界的空间维度本同末离。在机器学习中，数据通常需要被表示成向量形式以输入模型进行训练。但众所周知，对向维向量进行处理和分析时，会极大地消耗系统资源，甚至产生维度灾难。因此，进行降维，即用一个低维度的向量表示原始高维度的特征就显得尤为重要。常见的降维方法有主成分分析、线性判别分析、等距映射、局部线性嵌入、拉普拉斯特征映射、局部保留投影等。”","text_tokens":["对于","立方","大","把","”","用","变得","赖于","系统","走","掉","一个","长","（","被","dimensionality","尤为重要","“","现有","硬币","of","找针","产生","给出","模型","个数","不难","然后","com","以","方法","层楼","而言","因此","你","聚类",":","办法","特征提取","而",")","想","宽","the","原始","映射","30","降维","上","但","该","拉普拉斯","样本","等","好","不","一条","类比","拉普",".","码","：","要","特征","立方体","即","当","就是","是","足球","局部","沿着","一枚","嵌入","困难","依赖","大型","并","与","了","处理","内","中","的","两个","找","那","这条","…","领域","变量","本同末离","甚至","对","位置","quora","成","体育场","普拉斯","可能","难度","，","时间","尤为","为重","维度","就行了","假设","系统资源","足球场","高","(","在","通常","有效","kevin","于","answer","2","就","保留","好比","也","空间","要求","地","时候","数据","距离","输入","is","需要","即用","​","有主","来说","体育","-","资源","和","现在","对向维","curse","常见","计算","显得","重要","愈加","最多","所谓","可","时","相对","几天"," ","/","提取","学习","特别","最多花","灾难","观测","指","用户","直线","这条线","算法","集中","、","增加","随着","判别分析","100","某个","并排","zhen","只","what","）","这","选取","极大","它","分析","线性","都","表示","现实","https","成分","需","会","球场","再","www","世界","判别","非常","众所周知","某处","广场","容易","依赖于","进行","有位","消耗","低","找回","形式","机器","lacker","普拉","分钟","会耗","投影","向量","出","周知","等距","链接","维数","拉斯","有","数量","训练","搜索","。"],"title":"维度灾难","title_tokens":["灾难","维度"]}]}