{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What I cannot create, I do not understand 项目 技能","text_tokens":["understand","技能","i","cannot","what","do","not"," ","项目","create",","],"title":"简历","title_tokens":["简历"]},{"location":"#what-i-cannot-create-i-do-not-understand","text":"","text_tokens":[],"title":"What I cannot create, I do not understand","title_tokens":["understand","i","cannot","what","do","not"," ","create",","]},{"location":"#_1","text":"","text_tokens":[],"title":"项目","title_tokens":["项目"]},{"location":"#_2","text":"","text_tokens":[],"title":"技能","title_tokens":["技能"]},{"location":"%E6%8A%80%E8%83%BD/","text":"\"What I cannot create, I do not understand\" keras 参考： https://keras.io/ Setup import numpy as np import tensorflow as tf from tensorflow import keras Data loading Keras models accept three types of inputs: NumPy arrays , just like Scikit-Learn and many other Python-based libraries. This is a good option if your data fits in memory. TensorFlow Dataset objects . This is a high-performance option that is more suitable for datasets that do not fit in memory and that are streamed from disk or from a distributed filesystem. Python generators that yield batches of data (such as custom subclasses of the keras.utils.Sequence class). Keras features a range of utilities to help you turn raw data on disk into a Dataset : tf.keras.preprocessing.image_dataset_from_directory turns image files sorted into class-specific folders into a labeled dataset of image tensors. tf.keras.preprocessing.text_dataset_from_directory does the same for text files. In addition, the TensorFlow tf.data includes other similar utilities, such as tf.data.experimental.make_csv_dataset to load structured data from CSV files. Supposed you have image files sorted by class in different folders, like this: main_directory/ ...class_a/ ......a_image_1.jpg ......a_image_2.jpg ...class_b/ ......b_image_1.jpg ......b_image_2.jpg Then you can do: # Create a dataset. dataset = keras.preprocessing.image_dataset_from_directory( 'path/to/main_directory', batch_size=64, image_size=(200, 200)) # For demonstration, iterate over the batches yielded by the dataset. for data, labels in dataset: print(data.shape) # (64, 200, 200, 3) print(data.dtype) # float32 print(labels.shape) # (64,) print(labels.dtype) # int32 The label of a sample is the rank of its folder in alphanumeric order. Naturally, this can also be configured explicitly by passing, e.g. class_names=['class_a', 'class_b'] , in which cases label 0 will be class_a and 1 will be class_b . Example: obtaining a labeled dataset from text files on disk Likewise for text: if you have .txt documents sorted by class in different folders, you can do: dataset = keras.preprocessing.text_dataset_from_directory( 'path/to/main_directory', batch_size=64) # For demonstration, iterate over the batches yielded by the dataset. for data, labels in dataset: print(data.shape) # (64,) print(data.dtype) # string print(labels.shape) # (64,) print(labels.dtype) # int32 Data preprocessing with Keras Using Keras preprocessing layers In Keras, you do in-model data preprocessing via preprocessing layers . This includes: Vectorizing raw strings of text via the TextVectorization layer Feature normalization via the Normalization layer Image rescaling, cropping, or image data augmentation Example: turning strings into sequences of integer word indices from tensorflow.keras.layers.experimental.preprocessing import TextVectorization # Example training data, of dtype `string`. training_data = np.array([[\"This is the 1st sample.\"], [\"And here's the 2nd sample.\"]]) # Create a TextVectorization layer instance. It can be configured to either # return integer token indices, or a dense token representation (e.g. multi-hot # or TF-IDF). The text standardization and text splitting algorithms are fully # configurable. vectorizer = TextVectorization(output_mode=\"int\") # Calling `adapt` on an array or dataset makes the layer generate a vocabulary # index for the data, which can then be reused when seeing new data. vectorizer.adapt(training_data) # After calling adapt, the layer is able to encode any n-gram it has seen before # in the `adapt()` data. Unknown n-grams are encoded via an \"out-of-vocabulary\" # token. integer_data = vectorizer(training_data) print(integer_data) tf.Tensor( [[4 5 2 9 3] [7 6 2 8 3]], shape=(2, 5), dtype=int64) Example: turning strings into sequences of one-hot encoded bigrams from tensorflow.keras.layers.experimental.preprocessing import TextVectorization # Example training data, of dtype `string`. training_data = np.array([[\"This is the 1st sample.\"], [\"And here's the 2nd sample.\"]]) # Create a TextVectorization layer instance. It can be configured to either # return integer token indices, or a dense token representation (e.g. multi-hot # or TF-IDF). The text standardization and text splitting algorithms are fully # configurable. vectorizer = TextVectorization(output_mode=\"binary\", ngrams=2) # Calling `adapt` on an array or dataset makes the layer generate a vocabulary # index for the data, which can then be reused when seeing new data. vectorizer.adapt(training_data) # After calling adapt, the layer is able to encode any n-gram it has seen before # in the `adapt()` data. Unknown n-grams are encoded via an \"out-of-vocabulary\" # token. integer_data = vectorizer(training_data) print(integer_data) tf.Tensor( [[0. 1. 1. 1. 1. 0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 1. 1.] [0. 1. 1. 0. 0. 1. 0. 0. 0. 1. 1. 1. 1. 1. 1. 0. 0.]], shape=(2, 17), dtype=float32) Example: normalizing features from tensorflow.keras.layers.experimental.preprocessing import Normalization # Example image data, with values in the [0, 255] range training_data = np.random.randint(0, 256, size=(64, 200, 200, 3)).astype(\"float32\") normalizer = Normalization(axis=-1) normalizer.adapt(training_data) normalized_data = normalizer(training_data) print(\"var: %.4f\" % np.var(normalized_data)) print(\"mean: %.4f\" % np.mean(normalized_data)) var: 1.0000 mean: 0.0000 Example: rescaling & center-cropping images Both the Rescaling layer and the CenterCrop layer are stateless, so it isn't necessary to call adapt() in this case. from tensorflow.keras.layers.experimental.preprocessing import CenterCrop from tensorflow.keras.layers.experimental.preprocessing import Rescaling # Example image data, with values in the [0, 255] range training_data = np.random.randint(0, 256, size=(64, 200, 200, 3)).astype(\"float32\") cropper = CenterCrop(height=150, width=150) scaler = Rescaling(scale=1.0 / 255) output_data = scaler(cropper(training_data)) print(\"shape:\", output_data.shape) print(\"min:\", np.min(output_data)) print(\"max:\", np.max(output_data)) shape: (64, 150, 150, 3) min: 0.0 max: 1.0 Building models with the Keras Functional API For instance, here's a linear projection layer that maps its inputs to a 16-dimensional feature space: dense = keras.layers.Dense(units=16) The most common and most powerful way to build Keras models is the Functional API. # Let's say we expect our inputs to be RGB images of arbitrary size inputs = keras.Input(shape=(None, None, 3)) After defining your input(s), you chain layer transformations on top of your inputs, until your final output: from tensorflow.keras import layers # Center-crop images to 150x150 x = CenterCrop(height=150, width=150)(inputs) # Rescale images to [0, 1] x = Rescaling(scale=1.0 / 255)(x) # Apply some convolution and pooling layers x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x) x = layers.MaxPooling2D(pool_size=(3, 3))(x) x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x) x = layers.MaxPooling2D(pool_size=(3, 3))(x) x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x) # Apply global average pooling to get flat feature vectors x = layers.GlobalAveragePooling2D()(x) # Add a dense classifier on top num_classes = 10 outputs = layers.Dense(num_classes, activation=\"softmax\")(x) Once you have defined the directed acyclic graph of layers that turns your input(s) into your outputs, instantiate a Model object: model = keras.Model(inputs=inputs, outputs=outputs) This model behaves basically like a bigger layer. You can call it on batches of data, like this: data = np.random.randint(0, 256, size=(64, 200, 200, 3)).astype(\"float32\") processed_data = model(data) print(processed_data.shape) (64, 10) You can print a summary of how your data gets transformed at each stage of the model. This is useful for debugging. Note that the output shape displayed for each layer includes the batch size . Here the batch size is None, which indicates our model can process batches of any size. model.summary() Model: \"functional_1\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) [(None, None, None, 3)] 0 _________________________________________________________________ center_crop_1 (CenterCrop) (None, 150, 150, 3) 0 _________________________________________________________________ rescaling_1 (Rescaling) (None, 150, 150, 3) 0 _________________________________________________________________ conv2d (Conv2D) (None, 148, 148, 32) 896 _________________________________________________________________ max_pooling2d (MaxPooling2D) (None, 49, 49, 32) 0 _________________________________________________________________ conv2d_1 (Conv2D) (None, 47, 47, 32) 9248 _________________________________________________________________ max_pooling2d_1 (MaxPooling2 (None, 15, 15, 32) 0 _________________________________________________________________ conv2d_2 (Conv2D) (None, 13, 13, 32) 9248 _________________________________________________________________ global_average_pooling2d (Gl (None, 32) 0 _________________________________________________________________ dense (Dense) (None, 10) 330 ================================================================= Total params: 19,722 Trainable params: 19,722 Non-trainable params: 0 _________________________________________________________________ The Functional API also makes it easy to build models that have multiple inputs (for instance, an image and its metadata) or multiple outputs (for instance, predicting the class of the image and the likelihood that a user will click on it). For a deeper dive into what you can do, see our guide to the Functional API . Training models with fit() Before you can call fit() , you need to specify an optimizer and a loss function (we assume you are already familiar with these concepts). This is the compile() step: model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=1e-3), loss=keras.losses.CategoricalCrossentropy()) Loss and optimizer can be specified via their string identifiers (in this case their default constructor argument values are used): model.compile(optimizer='rmsprop', loss='categorical_crossentropy') Once your model is compiled, you can start \"fitting\" the model to the data. Here's what fitting a model looks like with NumPy data: model.fit(numpy_array_of_samples, numpy_array_of_labels, batch_size=32, epochs=10) Besides the data, you have to specify two key parameters: the batch_size and the number of epochs (iterations on the data). Here our data will get sliced on batches of 32 samples, and the model will iterate 10 times over the data during training. Here's what fitting a model looks like with a dataset: model.fit(dataset_of_samples_and_labels, epochs=10) Since the data yielded by a dataset is expect to be already batched, you don't need to specify the batch size here. Let's look at it in practice with a toy example model that learns to classify MNIST digits: # Get the data as Numpy arrays (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data() # Build a simple model inputs = keras.Input(shape=(28, 28)) x = layers.experimental.preprocessing.Rescaling(1.0 / 255)(inputs) x = layers.Flatten()(x) x = layers.Dense(128, activation=\"relu\")(x) x = layers.Dense(128, activation=\"relu\")(x) outputs = layers.Dense(10, activation=\"softmax\")(x) model = keras.Model(inputs, outputs) model.summary() # Compile the model model.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\") # Train the model for 1 epoch from Numpy data batch_size = 64 print(\"Fit on NumPy data\") history = model.fit(x_train, y_train, batch_size=batch_size, epochs=1) # Train the model for 1 epoch using a dataset dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(batch_size) print(\"Fit on Dataset\") history = model.fit(dataset, epochs=1) Model: \"functional_3\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_2 (InputLayer) [(None, 28, 28)] 0 _________________________________________________________________ rescaling_2 (Rescaling) (None, 28, 28) 0 _________________________________________________________________ flatten (Flatten) (None, 784) 0 _________________________________________________________________ dense_1 (Dense) (None, 128) 100480 _________________________________________________________________ dense_2 (Dense) (None, 128) 16512 _________________________________________________________________ dense_3 (Dense) (None, 10) 1290 ================================================================= Total params: 118,282 Trainable params: 118,282 Non-trainable params: 0 _________________________________________________________________ Fit on NumPy data 938/938 [==============================] - 1s 1ms/step - loss: 0.2671 Fit on Dataset 938/938 [==============================] - 1s 1ms/step - loss: 0.1156 The fit() call returns a \"history\" object which records what happened over the course of training. The history.history dict contains per-epoch timeseries of metrics values (here we have only one metric, the loss, and one epoch, so we only get a single scalar): print(history.history) {'loss': [0.11557048559188843]} For a detailed overview of how to use fit() , see the guide to training & evaluation with the built-in Keras methods . 基金： 参考： https://www.zhihu.com/question/36702693 输出：？","text_tokens":["some","scikit","0","most","via","keras","besides","17","indices","identifiers","turns","single","2","49","start","#","metadata","features","string","course",",","pooling","kernel","epoch","rescale","used","only","turning","rgb","inputlayer","&","makes","instance","raw","8","sample","names","0.0000","crossentropy","since","as","pooling2d","with","click","fit","'","text","option","vectorizer","types","preprocessing","inputs","io","max","num","-","obtaining","csv","disk","summary","help","scale","slices","debugging","896","pool","does","330","indicates","images","flatten","stateless","47","10","yielded","strings","encode","hot","s","their","folders","9","number","}","integer","stage","are","understand","algorithms","data","np","accept","image","how","gl","graph","libraries","encoded","%","custom","astype","0.11557048559188843","crop","loss","training","_________________________________________________________________","contains","150x150","augmentation","generate","which","params","938","0.1156","key","1s","center","import","{","relu","explicitly","user","i","be","experimental","if","参考","times","during","have","processed","sparse","projection","specify","15","9248","objects","32","activation","based","or",")","b","demonstration","param","globalaveragepooling2d","main","make","many","both","space","average","already","(","at","see","fully","bigrams","test","good","idf","random","scalar","need","rank","output","note","just","class","likewise","any","convolution","datasets","vocabulary","www","so","/","subclasses","same","19","add","filters","behaves","16512","files","=","print","happened","learn","cases","seeing","units","deeper","includes","trainable","layer","instantiate","evaluation","1290","over","flat","grams","fitting","gets","height","assume","generators","on","python","compile","example","will","150","200","iterations","can","categoricalcrossentropy","filesystem","two","has","softmax","splitting","your","built","different","fits","bigger","sequences","size","arbitrary","normalized","path","predicting","]","optimizer","cropping","reused","learning","tensors","28","255","1.0","defining","here","memory","don","loading","scaler","methods","step","unknown","a","vectors","what","an","in","losses","36702693","object","min","100480","constructor","type","these","either","numpy","16","g","acyclic","tensorflow","necessary","guide","centercrop","adapt","conv2d","`","6","width","build","into","call","global","normalization","it","n","epochs","you","suitable","digits","outputs","performance","vectorizing","dense","standardization","chain","dataset","dict","t","mean","range","yield","axis","rmsprop","x","parameters","classify","metric","practice","three","dtype","compiled","representation","7","transformations","722","118","model","for","look","also","int32","float32","samples","rate","documents","categorical","toy","https","building","order","isn","282","use","feature","basically","dimensional","returns","setup","13","way","ngrams","1st","each",":","configured","high","distributed","_","mode","4","similar","apply","naturally","binary","folder","2nd","overview","64","[","using","none","maxpooling2","输出","one","concepts","per","iterate","return","new","out","seen","tf","sorted","powerful","sliced","more","turn","total","load","zhihu","after"," ","final","when","familiar","api","1ms","layers","labels","that","not","of","addition","148","models","this","by","argument","txt","optimizers","int","let","：","like","specific","shape","until","input","...","mnist","question","timeseries","likelihood","before","classifier","var","0.2671","do","passing","directed","com","detailed","displayed","tensor","adam","looks","cannot","such","linear","train","able","batches","expect","utils","create","top","normalizer","index","256","utilities","？","non","learns","1e","we","default","1","0.0","maps","batched","textvectorization","useful","defined","directory","normalizing","to","randint","get","\"","is","specified","y","simple","case","easy","5","cropper","process","say","arrays","classes","transformed","multi","int64","metrics","labeled","records","streamed","supposed","784","configurable","label","multiple","the","functional","token","values","history","基金","e","once","4f","common","sequence","3","alphanumeric","calling","function","then","our","dive","128","batch","%.","rescaling","array","maxpooling2d","jpg","from",".","word","its","structured","and","......","1.0000","other","gram"],"title":"技能","title_tokens":["技能"]},{"location":"%E6%8A%80%E8%83%BD/#what-i-cannot-create-i-do-not-understand","text":"","text_tokens":[],"title":"\"What I cannot create, I do not understand\"","title_tokens":["understand","i","cannot","what","do","not"," ","\"","create",","]},{"location":"%E6%8A%80%E8%83%BD/#keras","text":"参考： https://keras.io/","text_tokens":[":","io","https"," ","参考","/","：",".","keras"],"title":"keras","title_tokens":["keras"]},{"location":"%E6%8A%80%E8%83%BD/#setup","text":"import numpy as np import tensorflow as tf from tensorflow import keras","text_tokens":["as","np"," ","tf","from","tensorflow","numpy","import","keras"],"title":"Setup","title_tokens":["setup"]},{"location":"%E6%8A%80%E8%83%BD/#data-loading","text":"Keras models accept three types of inputs: NumPy arrays , just like Scikit-Learn and many other Python-based libraries. This is a good option if your data fits in memory. TensorFlow Dataset objects . This is a high-performance option that is more suitable for datasets that do not fit in memory and that are streamed from disk or from a distributed filesystem. Python generators that yield batches of data (such as custom subclasses of the keras.utils.Sequence class). Keras features a range of utilities to help you turn raw data on disk into a Dataset : tf.keras.preprocessing.image_dataset_from_directory turns image files sorted into class-specific folders into a labeled dataset of image tensors. tf.keras.preprocessing.text_dataset_from_directory does the same for text files. In addition, the TensorFlow tf.data includes other similar utilities, such as tf.data.experimental.make_csv_dataset to load structured data from CSV files. Supposed you have image files sorted by class in different folders, like this: main_directory/ ...class_a/ ......a_image_1.jpg ......a_image_2.jpg ...class_b/ ......b_image_1.jpg ......b_image_2.jpg Then you can do: # Create a dataset. dataset = keras.preprocessing.image_dataset_from_directory( 'path/to/main_directory', batch_size=64, image_size=(200, 200)) # For demonstration, iterate over the batches yielded by the dataset. for data, labels in dataset: print(data.shape) # (64, 200, 200, 3) print(data.dtype) # float32 print(labels.shape) # (64,) print(labels.dtype) # int32 The label of a sample is the rank of its folder in alphanumeric order. Naturally, this can also be configured explicitly by passing, e.g. class_names=['class_a', 'class_b'] , in which cases label 0 will be class_a and 1 will be class_b . Example: obtaining a labeled dataset from text files on disk Likewise for text: if you have .txt documents sorted by class in different folders, you can do: dataset = keras.preprocessing.text_dataset_from_directory( 'path/to/main_directory', batch_size=64) # For demonstration, iterate over the batches yielded by the dataset. for data, labels in dataset: print(data.shape) # (64,) print(data.dtype) # string print(labels.shape) # (64,) print(labels.dtype) # int32","text_tokens":["scikit","0","tensorflow","objects","like","based","keras","specific","or",")","turns","b","demonstration","...","shape","2","#","main","features","string","into","make",",","do","many","passing","you","suitable","(","performance","dataset","good","range","yield","rank","such","just","class","likewise","raw","three","sample","names","datasets","dtype","batches","as","/","fit","utils","'","create","text","subclasses","same","utilities","for","also","int32","option","float32","files","types","=","print","learn","preprocessing","documents","inputs","cases","1","includes","order","-","obtaining","csv","disk","over","help","directory","to","generators","is","on","python",":","does","configured","example","will","high","distributed","_","arrays","yielded","similar","200","can","filesystem","naturally","folders","folder","64","[","your","are","labeled","different","streamed","fits","supposed","data","accept","image","size","libraries","iterate","path","custom","label","]","tf","the","sorted","e","more","turn","tensors","sequence","load","3","alphanumeric","then"," ","memory","which","batch","a","in","jpg","from",".","its","structured","and","labels","explicitly","that","......","be","experimental","if","of","not","addition","other","have","models","numpy","this","by","txt","g"],"title":"Data loading","title_tokens":["loading","data"," "]},{"location":"%E6%8A%80%E8%83%BD/#data-preprocessing-with-keras","text":"Using Keras preprocessing layers In Keras, you do in-model data preprocessing via preprocessing layers . This includes: Vectorizing raw strings of text via the TextVectorization layer Feature normalization via the Normalization layer Image rescaling, cropping, or image data augmentation Example: turning strings into sequences of integer word indices from tensorflow.keras.layers.experimental.preprocessing import TextVectorization # Example training data, of dtype `string`. training_data = np.array([[\"This is the 1st sample.\"], [\"And here's the 2nd sample.\"]]) # Create a TextVectorization layer instance. It can be configured to either # return integer token indices, or a dense token representation (e.g. multi-hot # or TF-IDF). The text standardization and text splitting algorithms are fully # configurable. vectorizer = TextVectorization(output_mode=\"int\") # Calling `adapt` on an array or dataset makes the layer generate a vocabulary # index for the data, which can then be reused when seeing new data. vectorizer.adapt(training_data) # After calling adapt, the layer is able to encode any n-gram it has seen before # in the `adapt()` data. Unknown n-grams are encoded via an \"out-of-vocabulary\" # token. integer_data = vectorizer(training_data) print(integer_data) tf.Tensor( [[4 5 2 9 3] [7 6 2 8 3]], shape=(2, 5), dtype=int64) Example: turning strings into sequences of one-hot encoded bigrams from tensorflow.keras.layers.experimental.preprocessing import TextVectorization # Example training data, of dtype `string`. training_data = np.array([[\"This is the 1st sample.\"], [\"And here's the 2nd sample.\"]]) # Create a TextVectorization layer instance. It can be configured to either # return integer token indices, or a dense token representation (e.g. multi-hot # or TF-IDF). The text standardization and text splitting algorithms are fully # configurable. vectorizer = TextVectorization(output_mode=\"binary\", ngrams=2) # Calling `adapt` on an array or dataset makes the layer generate a vocabulary # index for the data, which can then be reused when seeing new data. vectorizer.adapt(training_data) # After calling adapt, the layer is able to encode any n-gram it has seen before # in the `adapt()` data. Unknown n-grams are encoded via an \"out-of-vocabulary\" # token. integer_data = vectorizer(training_data) print(integer_data) tf.Tensor( [[0. 1. 1. 1. 1. 0. 1. 1. 1. 0. 0. 0. 0. 0. 0. 1. 1.] [0. 1. 1. 0. 0. 1. 0. 0. 0. 1. 1. 1. 1. 1. 1. 0. 0.]], shape=(2, 17), dtype=float32) Example: normalizing features from tensorflow.keras.layers.experimental.preprocessing import Normalization # Example image data, with values in the [0, 255] range training_data = np.random.randint(0, 256, size=(64, 200, 200, 3)).astype(\"float32\") normalizer = Normalization(axis=-1) normalizer.adapt(training_data) normalized_data = normalizer(training_data) print(\"var: %.4f\" % np.var(normalized_data)) print(\"mean: %.4f\" % np.mean(normalized_data)) var: 1.0000 mean: 0.0000 Example: rescaling & center-cropping images Both the Rescaling layer and the CenterCrop layer are stateless, so it isn't necessary to call adapt() in this case. from tensorflow.keras.layers.experimental.preprocessing import CenterCrop from tensorflow.keras.layers.experimental.preprocessing import Rescaling # Example image data, with values in the [0, 255] range training_data = np.random.randint(0, 256, size=(64, 200, 200, 3)).astype(\"float32\") cropper = CenterCrop(height=150, width=150) scaler = Rescaling(scale=1.0 / 255) output_data = scaler(cropper(training_data)) print(\"shape:\", output_data.shape) print(\"min:\", np.min(output_data)) print(\"max:\", np.max(output_data)) shape: (64, 150, 150, 3) min: 0.0 max: 1.0","text_tokens":["int","0","tensorflow","via","necessary","centercrop","keras","17","or","indices",")","shape","2","adapt","#","`","6","width","features","string","into","before","call",",","normalization","it","var","n","do","both","you","(","vectorizing","dense","standardization","fully","dataset","bigrams","tensor","turning","idf","random","&","t","mean","range","axis","output","makes","any","instance","raw","8","sample","able","dtype","vocabulary","0.0000","representation","so","with","/","'","7","create","text","normalizer","model","index","256","for","float32","=","vectorizer","print","preprocessing","max","seeing","1","includes","layer","-","0.0","isn","textvectorization","feature","grams","normalizing","scale","height","to","randint","\"","is","on","ngrams","1st",":","example","configured","images","stateless","case","5","150","mode","_","4","cropper","encode","strings","hot","200","s","can","binary","2nd","has","9","multi","int64","64","splitting","integer","using","[","are","algorithms","sequences","one","data","np","size","image","normalized","return","new","out","encoded","%","configurable","astype","]","seen","tf","the","cropping","token","training","values","reused","e","4f","255","1.0","augmentation","after","3","calling","then","generate"," ","here","when","which","scaler","unknown","a","%.","rescaling","array","an","in","from","center","import",".","word","layers","min","and","be","experimental","of","either","1.0000","gram","this","g"],"title":"Data preprocessing with Keras","title_tokens":["preprocessing","data"," ","with","keras"]},{"location":"%E6%8A%80%E8%83%BD/#building-models-with-the-keras-functional-api","text":"For instance, here's a linear projection layer that maps its inputs to a 16-dimensional feature space: dense = keras.layers.Dense(units=16) The most common and most powerful way to build Keras models is the Functional API. # Let's say we expect our inputs to be RGB images of arbitrary size inputs = keras.Input(shape=(None, None, 3)) After defining your input(s), you chain layer transformations on top of your inputs, until your final output: from tensorflow.keras import layers # Center-crop images to 150x150 x = CenterCrop(height=150, width=150)(inputs) # Rescale images to [0, 1] x = Rescaling(scale=1.0 / 255)(x) # Apply some convolution and pooling layers x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x) x = layers.MaxPooling2D(pool_size=(3, 3))(x) x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x) x = layers.MaxPooling2D(pool_size=(3, 3))(x) x = layers.Conv2D(filters=32, kernel_size=(3, 3), activation=\"relu\")(x) # Apply global average pooling to get flat feature vectors x = layers.GlobalAveragePooling2D()(x) # Add a dense classifier on top num_classes = 10 outputs = layers.Dense(num_classes, activation=\"softmax\")(x) Once you have defined the directed acyclic graph of layers that turns your input(s) into your outputs, instantiate a Model object: model = keras.Model(inputs=inputs, outputs=outputs) This model behaves basically like a bigger layer. You can call it on batches of data, like this: data = np.random.randint(0, 256, size=(64, 200, 200, 3)).astype(\"float32\") processed_data = model(data) print(processed_data.shape) (64, 10) You can print a summary of how your data gets transformed at each stage of the model. This is useful for debugging. Note that the output shape displayed for each layer includes the batch size . Here the batch size is None, which indicates our model can process batches of any size. model.summary() Model: \"functional_1\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_1 (InputLayer) [(None, None, None, 3)] 0 _________________________________________________________________ center_crop_1 (CenterCrop) (None, 150, 150, 3) 0 _________________________________________________________________ rescaling_1 (Rescaling) (None, 150, 150, 3) 0 _________________________________________________________________ conv2d (Conv2D) (None, 148, 148, 32) 896 _________________________________________________________________ max_pooling2d (MaxPooling2D) (None, 49, 49, 32) 0 _________________________________________________________________ conv2d_1 (Conv2D) (None, 47, 47, 32) 9248 _________________________________________________________________ max_pooling2d_1 (MaxPooling2 (None, 15, 15, 32) 0 _________________________________________________________________ conv2d_2 (Conv2D) (None, 13, 13, 32) 9248 _________________________________________________________________ global_average_pooling2d (Gl (None, 32) 0 _________________________________________________________________ dense (Dense) (None, 10) 330 ================================================================= Total params: 19,722 Trainable params: 19,722 Non-trainable params: 0 _________________________________________________________________ The Functional API also makes it easy to build models that have multiple inputs (for instance, an image and its metadata) or multiple outputs (for instance, predicting the class of the image and the likelihood that a user will click on it). For a deeper dive into what you can do, see our guide to the Functional API .","text_tokens":["projection","some","acyclic","let","0","15","9248","most","tensorflow","32","activation","like","centercrop","guide","keras","shape",")","until","turns","input","param","or","2","globalaveragepooling2d","49","conv2d","#","width","metadata","build","likelihood","classifier","into","call",",","global","it","pooling","do","kernel","space","you","rescale","average","outputs","(","directed","at","dense","chain","see","displayed","rgb","inputlayer","random","linear","output","x","note","any","makes","instance","class","convolution","batches","pooling2d","click","/","expect","'","transformations","top","722","model","19","256","non","add","for","filters","also","float32","behaves","=","print","inputs","we","max","units","1","deeper","num","includes","trainable","layer","instantiate","maps","-","feature","flat","summary","useful","defined","gets","basically","scale","dimensional","height","to","get","randint","debugging","896","\"","is","pool","way","on","13","each",":","330","indicates","images","easy","will","150","_","process","10","say","47","classes","apply","s","can","200","transformed","softmax","64","[","none","your","stage","maxpooling2","bigger","data","np","size","how","gl","image","graph","arbitrary","astype","predicting","]","multiple","the","crop","functional","powerful","_________________________________________________________________","once","total","common","150x150","255","1.0","after","3","defining","our","dive","here"," ","final","which","params","batch","a","vectors","rescaling","what","an","api","maxpooling2d","from","center","import","object",".","its","layers","relu","and","user","that","be","type","of","148","have","processed","models","this","16"],"title":"Building models with the Keras Functional API","title_tokens":["api"," ","the","building","with","functional","models","keras"]},{"location":"%E6%8A%80%E8%83%BD/#training-models-with-fit","text":"Before you can call fit() , you need to specify an optimizer and a loss function (we assume you are already familiar with these concepts). This is the compile() step: model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=1e-3), loss=keras.losses.CategoricalCrossentropy()) Loss and optimizer can be specified via their string identifiers (in this case their default constructor argument values are used): model.compile(optimizer='rmsprop', loss='categorical_crossentropy') Once your model is compiled, you can start \"fitting\" the model to the data. Here's what fitting a model looks like with NumPy data: model.fit(numpy_array_of_samples, numpy_array_of_labels, batch_size=32, epochs=10) Besides the data, you have to specify two key parameters: the batch_size and the number of epochs (iterations on the data). Here our data will get sliced on batches of 32 samples, and the model will iterate 10 times over the data during training. Here's what fitting a model looks like with a dataset: model.fit(dataset_of_samples_and_labels, epochs=10) Since the data yielded by a dataset is expect to be already batched, you don't need to specify the batch size here. Let's look at it in practice with a toy example model that learns to classify MNIST digits: # Get the data as Numpy arrays (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data() # Build a simple model inputs = keras.Input(shape=(28, 28)) x = layers.experimental.preprocessing.Rescaling(1.0 / 255)(inputs) x = layers.Flatten()(x) x = layers.Dense(128, activation=\"relu\")(x) x = layers.Dense(128, activation=\"relu\")(x) outputs = layers.Dense(10, activation=\"softmax\")(x) model = keras.Model(inputs, outputs) model.summary() # Compile the model model.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\") # Train the model for 1 epoch from Numpy data batch_size = 64 print(\"Fit on NumPy data\") history = model.fit(x_train, y_train, batch_size=batch_size, epochs=1) # Train the model for 1 epoch using a dataset dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train)).batch(batch_size) print(\"Fit on Dataset\") history = model.fit(dataset, epochs=1) Model: \"functional_3\" _________________________________________________________________ Layer (type) Output Shape Param # ================================================================= input_2 (InputLayer) [(None, 28, 28)] 0 _________________________________________________________________ rescaling_2 (Rescaling) (None, 28, 28) 0 _________________________________________________________________ flatten (Flatten) (None, 784) 0 _________________________________________________________________ dense_1 (Dense) (None, 128) 100480 _________________________________________________________________ dense_2 (Dense) (None, 128) 16512 _________________________________________________________________ dense_3 (Dense) (None, 10) 1290 ================================================================= Total params: 118,282 Trainable params: 118,282 Non-trainable params: 0 _________________________________________________________________ Fit on NumPy data 938/938 [==============================] - 1s 1ms/step - loss: 0.2671 Fit on Dataset 938/938 [==============================] - 1s 1ms/step - loss: 0.1156 The fit() call returns a \"history\" object which records what happened over the course of training. The history.history dict contains per-epoch timeseries of metrics values (here we have only one metric, the loss, and one epoch, so we only get a single scalar): print(history.history) {'loss': [0.11557048559188843]} For a detailed overview of how to use fit() , see the guide to training & evaluation with the built-in Keras methods .","text_tokens":["specify","let","0","via","32","like","activation","guide","keras","besides","shape",")","identifiers","param","input","single","start","mnist","2","#","timeseries","build","before","string","call",",","course","it","0.2671","epochs","epoch","you","used","digits","already","outputs","(","at","dense","detailed","see","dataset","dict","only","tensor","test","adam","inputlayer","&","scalar","looks","t","need","rmsprop","x","output","parameters","classify","metric","practice","train","datasets","crossentropy","compiled","batches","since","as","so","with","/","expect","fit","'","118","model","non","for","look","samples","16512","=","learns","rate","print","1e","categorical","preprocessing","inputs","toy","happened","we","default","1","trainable","layer","-","evaluation","batched","1290","282","use","over","summary","fitting","returns","to","get","slices","assume","\"","is","on","compile",":","specified","y","simple","example","case","flatten","will","_","10","yielded","arrays","s","can","categoricalcrossentropy","their","two","iterations","overview","number","}","softmax","64","[","using","your","are","none","records","metrics","built","concepts","one","data","how","size","per","iterate","784","]","0.11557048559188843","optimizer","the","tf","functional","loss","training","values","history","learning","sliced","_________________________________________________________________","once","28","total","contains","load","255","1.0","3","function","our"," ","here","128","don","familiar","which","params","938","step","batch","methods","a","array","rescaling","0.1156","what","an","key","in","1s","losses","1ms","from","object",".","layers","{","relu","100480","and","constructor","labels","that","be","type","experimental","these","times","of","during","have","this","argument","numpy","by","optimizers","sparse"],"title":"Training models with fit()","title_tokens":[")"," ","with","models","training","fit","("]},{"location":"%E6%8A%80%E8%83%BD/#_1","text":"参考： https://www.zhihu.com/question/36702693 输出：？","text_tokens":["com","输出",":","zhihu","https","www","question","？"," ","参考","36702693","/","：","."],"title":"基金：","title_tokens":["：","基金"]},{"location":"%E9%A1%B9%E7%9B%AE/","text":"","text_tokens":[],"title":"项目","title_tokens":["项目"]}]}